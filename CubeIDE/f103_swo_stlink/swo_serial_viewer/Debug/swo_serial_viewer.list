
swo_serial_viewer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026cc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a30  08002a30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a30  08002a30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a30  08002a30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a30  08002a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08002aa8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002aa8  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000571b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001413  00000000  00000000  000257b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  00026bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000410  00000000  00000000  00027080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019552  00000000  00000000  00027490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005909  00000000  00000000  000409e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f633  00000000  00000000  000462eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d591e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001884  00000000  00000000  000d5974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002898 	.word	0x08002898

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002898 	.word	0x08002898

08000224 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800022c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000230:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000234:	f003 0301 	and.w	r3, r3, #1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d013      	beq.n	8000264 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800023c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000240:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000244:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000248:	2b00      	cmp	r3, #0
 800024a:	d00b      	beq.n	8000264 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800024c:	e000      	b.n	8000250 <ITM_SendChar+0x2c>
    {
      __NOP();
 800024e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f9      	beq.n	800024e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800025a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000264:	687b      	ldr	r3, [r7, #4]
}
 8000266:	4618      	mov	r0, r3
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <_write>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int _write(int file, char *ptr, int len)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]
 8000280:	e009      	b.n	8000296 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	60ba      	str	r2, [r7, #8]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ffca 	bl	8000224 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	3301      	adds	r3, #1
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	697a      	ldr	r2, [r7, #20]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	429a      	cmp	r2, r3
 800029c:	dbf1      	blt.n	8000282 <_write+0x12>
	}
	return len;
 800029e:	687b      	ldr	r3, [r7, #4]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <main>:
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ac:	f000 f9e6 	bl	800067c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b0:	f000 f808 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b4:	f000 f842 	bl	800033c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Program is starting!\n\r");
 80002b8:	4801      	ldr	r0, [pc, #4]	; (80002c0 <main+0x18>)
 80002ba:	f001 fb8d 	bl	80019d8 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002be:	e7fe      	b.n	80002be <main+0x16>
 80002c0:	080028b0 	.word	0x080028b0

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fb78 	bl	80019c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f2:	2300      	movs	r3, #0
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fdbc 	bl	8000e78 <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000306:	f000 f89d 	bl	8000444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 f918 	bl	8001558 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032e:	f000 f889 	bl	8000444 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	; 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08a      	sub	sp, #40	; 0x28
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b36      	ldr	r3, [pc, #216]	; (800042c <MX_GPIO_Init+0xf0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a35      	ldr	r2, [pc, #212]	; (800042c <MX_GPIO_Init+0xf0>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b33      	ldr	r3, [pc, #204]	; (800042c <MX_GPIO_Init+0xf0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	613b      	str	r3, [r7, #16]
 8000366:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b30      	ldr	r3, [pc, #192]	; (800042c <MX_GPIO_Init+0xf0>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a2f      	ldr	r2, [pc, #188]	; (800042c <MX_GPIO_Init+0xf0>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b2d      	ldr	r3, [pc, #180]	; (800042c <MX_GPIO_Init+0xf0>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b2a      	ldr	r3, [pc, #168]	; (800042c <MX_GPIO_Init+0xf0>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a29      	ldr	r2, [pc, #164]	; (800042c <MX_GPIO_Init+0xf0>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b27      	ldr	r3, [pc, #156]	; (800042c <MX_GPIO_Init+0xf0>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000398:	4b24      	ldr	r3, [pc, #144]	; (800042c <MX_GPIO_Init+0xf0>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a23      	ldr	r2, [pc, #140]	; (800042c <MX_GPIO_Init+0xf0>)
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <MX_GPIO_Init+0xf0>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0308 	and.w	r3, r3, #8
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80003b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003b6:	2303      	movs	r3, #3
 80003b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ba:	f107 0314 	add.w	r3, r7, #20
 80003be:	4619      	mov	r1, r3
 80003c0:	481b      	ldr	r0, [pc, #108]	; (8000430 <MX_GPIO_Init+0xf4>)
 80003c2:	f000 fac5 	bl	8000950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80003c6:	2307      	movs	r3, #7
 80003c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ca:	2303      	movs	r3, #3
 80003cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	4619      	mov	r1, r3
 80003d4:	4817      	ldr	r0, [pc, #92]	; (8000434 <MX_GPIO_Init+0xf8>)
 80003d6:	f000 fabb 	bl	8000950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003da:	f649 73ff 	movw	r3, #40959	; 0x9fff
 80003de:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e0:	2303      	movs	r3, #3
 80003e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	4813      	ldr	r0, [pc, #76]	; (8000438 <MX_GPIO_Init+0xfc>)
 80003ec:	f000 fab0 	bl	8000950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003f0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80003f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003f6:	2303      	movs	r3, #3
 80003f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	f107 0314 	add.w	r3, r7, #20
 80003fe:	4619      	mov	r1, r3
 8000400:	480e      	ldr	r0, [pc, #56]	; (800043c <MX_GPIO_Init+0x100>)
 8000402:	f000 faa5 	bl	8000950 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_GPIO_Init+0x104>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
 800040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
 8000414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800041a:	627b      	str	r3, [r7, #36]	; 0x24
 800041c:	4a08      	ldr	r2, [pc, #32]	; (8000440 <MX_GPIO_Init+0x104>)
 800041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000420:	6053      	str	r3, [r2, #4]

}
 8000422:	bf00      	nop
 8000424:	3728      	adds	r7, #40	; 0x28
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	40011000 	.word	0x40011000
 8000434:	40011400 	.word	0x40011400
 8000438:	40010800 	.word	0x40010800
 800043c:	40010c00 	.word	0x40010c00
 8000440:	40010000 	.word	0x40010000

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <HAL_MspInit+0x5c>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <HAL_MspInit+0x5c>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_MspInit+0x5c>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <HAL_MspInit+0x5c>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <HAL_MspInit+0x5c>)
 8000488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800048c:	61d3      	str	r3, [r2, #28]
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <HAL_MspInit+0x5c>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <HAL_MspInit+0x60>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <HAL_MspInit+0x60>)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010000 	.word	0x40010000

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <HardFault_Handler+0x4>

080004da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <MemManage_Handler+0x4>

080004e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <BusFault_Handler+0x4>

080004e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <UsageFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000514:	f000 f8f8 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	e00a      	b.n	8000544 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800052e:	f3af 8000 	nop.w
 8000532:	4601      	mov	r1, r0
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60ba      	str	r2, [r7, #8]
 800053a:	b2ca      	uxtb	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbf0      	blt.n	800052e <_read+0x12>
	}

return len;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
	return -1;
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800057c:	605a      	str	r2, [r3, #4]
	return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <_isatty>:

int _isatty(int file)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
	return 1;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800059e:	b480      	push	{r7}
 80005a0:	b085      	sub	sp, #20
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	60f8      	str	r0, [r7, #12]
 80005a6:	60b9      	str	r1, [r7, #8]
 80005a8:	607a      	str	r2, [r7, #4]
	return 0;
 80005aa:	2300      	movs	r3, #0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
	...

080005b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <_sbrk+0x5c>)
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <_sbrk+0x60>)
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <_sbrk+0x64>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <_sbrk+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d207      	bcs.n	80005f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e8:	f001 f9c4 	bl	8001974 <__errno>
 80005ec:	4603      	mov	r3, r0
 80005ee:	220c      	movs	r2, #12
 80005f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e009      	b.n	800060c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <_sbrk+0x64>)
 8000608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000c000 	.word	0x2000c000
 8000618:	00000400 	.word	0x00000400
 800061c:	2000008c 	.word	0x2000008c
 8000620:	200000b0 	.word	0x200000b0

08000624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	; (8000674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000656:	f7ff ffe5 	bl	8000624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065a:	f001 f991 	bl	8001980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fe23 	bl	80002a8 <main>
  bx lr
 8000662:	4770      	bx	lr
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800066c:	08002a38 	.word	0x08002a38
  ldr r2, =_sbss
 8000670:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000674:	200000ac 	.word	0x200000ac

08000678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_2_IRQHandler>
	...

0800067c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_Init+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_Init+0x28>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068c:	2003      	movs	r0, #3
 800068e:	f000 f907 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f808 	bl	80006a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000698:	f7ff fee4 	bl	8000464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40022000 	.word	0x40022000

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x54>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x58>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f936 	bl	8000938 <HAL_SYSTICK_Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00e      	b.n	80006f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d80a      	bhi.n	80006f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f000 f8fc 	bl	80008e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <HAL_InitTick+0x5c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e000      	b.n	80006f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000008 	.word	0x20000008
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x20>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <HAL_IncTick+0x20>)
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000008 	.word	0x20000008
 8000728:	20000098 	.word	0x20000098

0800072c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return uwTick;
 8000730:	4b02      	ldr	r3, [pc, #8]	; (800073c <HAL_GetTick+0x10>)
 8000732:	681b      	ldr	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	20000098 	.word	0x20000098

08000740 <__NVIC_SetPriorityGrouping>:
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_SetPriority>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <SysTick_Config>:
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800086c:	d301      	bcc.n	8000872 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e00f      	b.n	8000892 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <SysTick_Config+0x40>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	210f      	movs	r1, #15
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f7ff ff90 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <SysTick_Config+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <SysTick_Config+0x40>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	d00f      	beq.n	80008ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b06      	cmp	r3, #6
 80008b2:	d00c      	beq.n	80008ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d009      	beq.n	80008ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d006      	beq.n	80008ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d003      	beq.n	80008ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008c6:	2192      	movs	r1, #146	; 0x92
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80008ca:	f7ff fdc1 	bl	8000450 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ff36 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	080028c8 	.word	0x080028c8

080008e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d903      	bls.n	8000900 <HAL_NVIC_SetPriority+0x20>
 80008f8:	21aa      	movs	r1, #170	; 0xaa
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <HAL_NVIC_SetPriority+0x54>)
 80008fc:	f7ff fda8 	bl	8000450 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2b0f      	cmp	r3, #15
 8000904:	d903      	bls.n	800090e <HAL_NVIC_SetPriority+0x2e>
 8000906:	21ab      	movs	r1, #171	; 0xab
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <HAL_NVIC_SetPriority+0x54>)
 800090a:	f7ff fda1 	bl	8000450 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800090e:	f7ff ff3b 	bl	8000788 <__NVIC_GetPriorityGrouping>
 8000912:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	6978      	ldr	r0, [r7, #20]
 800091a:	f7ff ff6d 	bl	80007f8 <NVIC_EncodePriority>
 800091e:	4602      	mov	r2, r0
 8000920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff3c 	bl	80007a4 <__NVIC_SetPriority>
}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	080028c8 	.word	0x080028c8

08000938 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff8b 	bl	800085c <SysTick_Config>
 8000946:	4603      	mov	r3, r0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4aa9      	ldr	r2, [pc, #676]	; (8000c0c <HAL_GPIO_Init+0x2bc>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01b      	beq.n	80009a2 <HAL_GPIO_Init+0x52>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4aa8      	ldr	r2, [pc, #672]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d017      	beq.n	80009a2 <HAL_GPIO_Init+0x52>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4aa7      	ldr	r2, [pc, #668]	; (8000c14 <HAL_GPIO_Init+0x2c4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0x52>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4aa6      	ldr	r2, [pc, #664]	; (8000c18 <HAL_GPIO_Init+0x2c8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00f      	beq.n	80009a2 <HAL_GPIO_Init+0x52>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4aa5      	ldr	r2, [pc, #660]	; (8000c1c <HAL_GPIO_Init+0x2cc>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d00b      	beq.n	80009a2 <HAL_GPIO_Init+0x52>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4aa4      	ldr	r2, [pc, #656]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d007      	beq.n	80009a2 <HAL_GPIO_Init+0x52>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4aa3      	ldr	r2, [pc, #652]	; (8000c24 <HAL_GPIO_Init+0x2d4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0x52>
 800099a:	21bd      	movs	r1, #189	; 0xbd
 800099c:	48a2      	ldr	r0, [pc, #648]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 800099e:	f7ff fd57 	bl	8000450 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d005      	beq.n	80009b8 <HAL_GPIO_Init+0x68>
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	0c1b      	lsrs	r3, r3, #16
 80009b2:	041b      	lsls	r3, r3, #16
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <HAL_GPIO_Init+0x70>
 80009b8:	21be      	movs	r1, #190	; 0xbe
 80009ba:	489b      	ldr	r0, [pc, #620]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 80009bc:	f7ff fd48 	bl	8000450 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f000 8235 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	f000 8230 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b11      	cmp	r3, #17
 80009da:	f000 822b 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	f000 8226 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b12      	cmp	r3, #18
 80009ee:	f000 8221 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	4a8d      	ldr	r2, [pc, #564]	; (8000c2c <HAL_GPIO_Init+0x2dc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	f000 821b 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	4a8b      	ldr	r2, [pc, #556]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	f000 8215 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	4a89      	ldr	r2, [pc, #548]	; (8000c34 <HAL_GPIO_Init+0x2e4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	f000 820f 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4a87      	ldr	r2, [pc, #540]	; (8000c38 <HAL_GPIO_Init+0x2e8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	f000 8209 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4a85      	ldr	r2, [pc, #532]	; (8000c3c <HAL_GPIO_Init+0x2ec>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	f000 8203 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	4a83      	ldr	r2, [pc, #524]	; (8000c40 <HAL_GPIO_Init+0x2f0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	f000 81fd 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	f000 81f8 	beq.w	8000e34 <HAL_GPIO_Init+0x4e4>
 8000a44:	21bf      	movs	r1, #191	; 0xbf
 8000a46:	4878      	ldr	r0, [pc, #480]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 8000a48:	f7ff fd02 	bl	8000450 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4c:	e1f2      	b.n	8000e34 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	69fa      	ldr	r2, [r7, #28]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	f040 81e1 	bne.w	8000e2e <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a67      	ldr	r2, [pc, #412]	; (8000c0c <HAL_GPIO_Init+0x2bc>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d01b      	beq.n	8000aac <HAL_GPIO_Init+0x15c>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a66      	ldr	r2, [pc, #408]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d017      	beq.n	8000aac <HAL_GPIO_Init+0x15c>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a65      	ldr	r2, [pc, #404]	; (8000c14 <HAL_GPIO_Init+0x2c4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d013      	beq.n	8000aac <HAL_GPIO_Init+0x15c>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a64      	ldr	r2, [pc, #400]	; (8000c18 <HAL_GPIO_Init+0x2c8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d00f      	beq.n	8000aac <HAL_GPIO_Init+0x15c>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a63      	ldr	r2, [pc, #396]	; (8000c1c <HAL_GPIO_Init+0x2cc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d00b      	beq.n	8000aac <HAL_GPIO_Init+0x15c>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a62      	ldr	r2, [pc, #392]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d007      	beq.n	8000aac <HAL_GPIO_Init+0x15c>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a61      	ldr	r2, [pc, #388]	; (8000c24 <HAL_GPIO_Init+0x2d4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x15c>
 8000aa4:	21cd      	movs	r1, #205	; 0xcd
 8000aa6:	4860      	ldr	r0, [pc, #384]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 8000aa8:	f7ff fcd2 	bl	8000450 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	4a63      	ldr	r2, [pc, #396]	; (8000c40 <HAL_GPIO_Init+0x2f0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	f000 80c6 	beq.w	8000c44 <HAL_GPIO_Init+0x2f4>
 8000ab8:	4a61      	ldr	r2, [pc, #388]	; (8000c40 <HAL_GPIO_Init+0x2f0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	f200 80ec 	bhi.w	8000c98 <HAL_GPIO_Init+0x348>
 8000ac0:	4a5c      	ldr	r2, [pc, #368]	; (8000c34 <HAL_GPIO_Init+0x2e4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	f000 80be 	beq.w	8000c44 <HAL_GPIO_Init+0x2f4>
 8000ac8:	4a5a      	ldr	r2, [pc, #360]	; (8000c34 <HAL_GPIO_Init+0x2e4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	f200 80e4 	bhi.w	8000c98 <HAL_GPIO_Init+0x348>
 8000ad0:	4a5a      	ldr	r2, [pc, #360]	; (8000c3c <HAL_GPIO_Init+0x2ec>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	f000 80b6 	beq.w	8000c44 <HAL_GPIO_Init+0x2f4>
 8000ad8:	4a58      	ldr	r2, [pc, #352]	; (8000c3c <HAL_GPIO_Init+0x2ec>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	f200 80dc 	bhi.w	8000c98 <HAL_GPIO_Init+0x348>
 8000ae0:	4a53      	ldr	r2, [pc, #332]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	f000 80ae 	beq.w	8000c44 <HAL_GPIO_Init+0x2f4>
 8000ae8:	4a51      	ldr	r2, [pc, #324]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	f200 80d4 	bhi.w	8000c98 <HAL_GPIO_Init+0x348>
 8000af0:	4a51      	ldr	r2, [pc, #324]	; (8000c38 <HAL_GPIO_Init+0x2e8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	f000 80a6 	beq.w	8000c44 <HAL_GPIO_Init+0x2f4>
 8000af8:	4a4f      	ldr	r2, [pc, #316]	; (8000c38 <HAL_GPIO_Init+0x2e8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	f200 80cc 	bhi.w	8000c98 <HAL_GPIO_Init+0x348>
 8000b00:	2b12      	cmp	r3, #18
 8000b02:	d82b      	bhi.n	8000b5c <HAL_GPIO_Init+0x20c>
 8000b04:	2b12      	cmp	r3, #18
 8000b06:	f200 80c7 	bhi.w	8000c98 <HAL_GPIO_Init+0x348>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <HAL_GPIO_Init+0x1c0>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000c45 	.word	0x08000c45
 8000b14:	08000b65 	.word	0x08000b65
 8000b18:	08000bb7 	.word	0x08000bb7
 8000b1c:	08000c93 	.word	0x08000c93
 8000b20:	08000c99 	.word	0x08000c99
 8000b24:	08000c99 	.word	0x08000c99
 8000b28:	08000c99 	.word	0x08000c99
 8000b2c:	08000c99 	.word	0x08000c99
 8000b30:	08000c99 	.word	0x08000c99
 8000b34:	08000c99 	.word	0x08000c99
 8000b38:	08000c99 	.word	0x08000c99
 8000b3c:	08000c99 	.word	0x08000c99
 8000b40:	08000c99 	.word	0x08000c99
 8000b44:	08000c99 	.word	0x08000c99
 8000b48:	08000c99 	.word	0x08000c99
 8000b4c:	08000c99 	.word	0x08000c99
 8000b50:	08000c99 	.word	0x08000c99
 8000b54:	08000b8d 	.word	0x08000b8d
 8000b58:	08000be1 	.word	0x08000be1
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <HAL_GPIO_Init+0x2dc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d070      	beq.n	8000c44 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b62:	e099      	b.n	8000c98 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d00b      	beq.n	8000b84 <HAL_GPIO_Init+0x234>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d007      	beq.n	8000b84 <HAL_GPIO_Init+0x234>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x234>
 8000b7c:	21d5      	movs	r1, #213	; 0xd5
 8000b7e:	482a      	ldr	r0, [pc, #168]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 8000b80:	f7ff fc66 	bl	8000450 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	623b      	str	r3, [r7, #32]
          break;
 8000b8a:	e086      	b.n	8000c9a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d00b      	beq.n	8000bac <HAL_GPIO_Init+0x25c>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d007      	beq.n	8000bac <HAL_GPIO_Init+0x25c>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x25c>
 8000ba4:	21dc      	movs	r1, #220	; 0xdc
 8000ba6:	4820      	ldr	r0, [pc, #128]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 8000ba8:	f7ff fc52 	bl	8000450 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e071      	b.n	8000c9a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d00b      	beq.n	8000bd6 <HAL_GPIO_Init+0x286>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0x286>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x286>
 8000bce:	21e3      	movs	r1, #227	; 0xe3
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 8000bd2:	f7ff fc3d 	bl	8000450 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	3308      	adds	r3, #8
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e05c      	b.n	8000c9a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d00b      	beq.n	8000c00 <HAL_GPIO_Init+0x2b0>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d007      	beq.n	8000c00 <HAL_GPIO_Init+0x2b0>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x2b0>
 8000bf8:	21ea      	movs	r1, #234	; 0xea
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 8000bfc:	f7ff fc28 	bl	8000450 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	330c      	adds	r3, #12
 8000c06:	623b      	str	r3, [r7, #32]
          break;
 8000c08:	e047      	b.n	8000c9a <HAL_GPIO_Init+0x34a>
 8000c0a:	bf00      	nop
 8000c0c:	40010800 	.word	0x40010800
 8000c10:	40010c00 	.word	0x40010c00
 8000c14:	40011000 	.word	0x40011000
 8000c18:	40011400 	.word	0x40011400
 8000c1c:	40011800 	.word	0x40011800
 8000c20:	40011c00 	.word	0x40011c00
 8000c24:	40012000 	.word	0x40012000
 8000c28:	08002904 	.word	0x08002904
 8000c2c:	10110000 	.word	0x10110000
 8000c30:	10210000 	.word	0x10210000
 8000c34:	10310000 	.word	0x10310000
 8000c38:	10120000 	.word	0x10120000
 8000c3c:	10220000 	.word	0x10220000
 8000c40:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <HAL_GPIO_Init+0x314>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d007      	beq.n	8000c64 <HAL_GPIO_Init+0x314>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d003      	beq.n	8000c64 <HAL_GPIO_Init+0x314>
 8000c5c:	21f7      	movs	r1, #247	; 0xf7
 8000c5e:	487c      	ldr	r0, [pc, #496]	; (8000e50 <HAL_GPIO_Init+0x500>)
 8000c60:	f7ff fbf6 	bl	8000450 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	623b      	str	r3, [r7, #32]
          break;
 8000c70:	e013      	b.n	8000c9a <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d105      	bne.n	8000c86 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69fa      	ldr	r2, [r7, #28]
 8000c82:	611a      	str	r2, [r3, #16]
          break;
 8000c84:	e009      	b.n	8000c9a <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c86:	2308      	movs	r3, #8
 8000c88:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69fa      	ldr	r2, [r7, #28]
 8000c8e:	615a      	str	r2, [r3, #20]
          break;
 8000c90:	e003      	b.n	8000c9a <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e000      	b.n	8000c9a <HAL_GPIO_Init+0x34a>
          break;
 8000c98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	2bff      	cmp	r3, #255	; 0xff
 8000c9e:	d801      	bhi.n	8000ca4 <HAL_GPIO_Init+0x354>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	e001      	b.n	8000ca8 <HAL_GPIO_Init+0x358>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	2bff      	cmp	r3, #255	; 0xff
 8000cae:	d802      	bhi.n	8000cb6 <HAL_GPIO_Init+0x366>
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_Init+0x36c>
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	3b08      	subs	r3, #8
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	401a      	ands	r2, r3
 8000cce:	6a39      	ldr	r1, [r7, #32]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80a2 	beq.w	8000e2e <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cea:	4b5a      	ldr	r3, [pc, #360]	; (8000e54 <HAL_GPIO_Init+0x504>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a59      	ldr	r2, [pc, #356]	; (8000e54 <HAL_GPIO_Init+0x504>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <HAL_GPIO_Init+0x504>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d02:	4a55      	ldr	r2, [pc, #340]	; (8000e58 <HAL_GPIO_Init+0x508>)
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4013      	ands	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4c      	ldr	r2, [pc, #304]	; (8000e5c <HAL_GPIO_Init+0x50c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d01f      	beq.n	8000d6e <HAL_GPIO_Init+0x41e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4b      	ldr	r2, [pc, #300]	; (8000e60 <HAL_GPIO_Init+0x510>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d019      	beq.n	8000d6a <HAL_GPIO_Init+0x41a>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4a      	ldr	r2, [pc, #296]	; (8000e64 <HAL_GPIO_Init+0x514>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d013      	beq.n	8000d66 <HAL_GPIO_Init+0x416>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <HAL_GPIO_Init+0x518>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d00d      	beq.n	8000d62 <HAL_GPIO_Init+0x412>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_GPIO_Init+0x51c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d007      	beq.n	8000d5e <HAL_GPIO_Init+0x40e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a47      	ldr	r2, [pc, #284]	; (8000e70 <HAL_GPIO_Init+0x520>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d101      	bne.n	8000d5a <HAL_GPIO_Init+0x40a>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e00a      	b.n	8000d70 <HAL_GPIO_Init+0x420>
 8000d5a:	2306      	movs	r3, #6
 8000d5c:	e008      	b.n	8000d70 <HAL_GPIO_Init+0x420>
 8000d5e:	2304      	movs	r3, #4
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x420>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e004      	b.n	8000d70 <HAL_GPIO_Init+0x420>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e002      	b.n	8000d70 <HAL_GPIO_Init+0x420>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <HAL_GPIO_Init+0x420>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d72:	f002 0203 	and.w	r2, r2, #3
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	4093      	lsls	r3, r2
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d80:	4935      	ldr	r1, [pc, #212]	; (8000e58 <HAL_GPIO_Init+0x508>)
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	3302      	adds	r3, #2
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4935      	ldr	r1, [pc, #212]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]
 8000da6:	e006      	b.n	8000db6 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000da8:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	4930      	ldr	r1, [pc, #192]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	492b      	ldr	r1, [pc, #172]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	604b      	str	r3, [r1, #4]
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	4926      	ldr	r1, [pc, #152]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	4921      	ldr	r1, [pc, #132]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	608b      	str	r3, [r1, #8]
 8000df6:	e006      	b.n	8000e06 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	491c      	ldr	r1, [pc, #112]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d006      	beq.n	8000e20 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	4917      	ldr	r1, [pc, #92]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60cb      	str	r3, [r1, #12]
 8000e1e:	e006      	b.n	8000e2e <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	4912      	ldr	r1, [pc, #72]	; (8000e74 <HAL_GPIO_Init+0x524>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	3301      	adds	r3, #1
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f47f ae05 	bne.w	8000a4e <HAL_GPIO_Init+0xfe>
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08002904 	.word	0x08002904
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40011400 	.word	0x40011400
 8000e6c:	40011800 	.word	0x40011800
 8000e70:	40011c00 	.word	0x40011c00
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e35c      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d01c      	beq.n	8000ecc <HAL_RCC_OscConfig+0x54>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d116      	bne.n	8000ecc <HAL_RCC_OscConfig+0x54>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d110      	bne.n	8000ecc <HAL_RCC_OscConfig+0x54>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10a      	bne.n	8000ecc <HAL_RCC_OscConfig+0x54>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d104      	bne.n	8000ecc <HAL_RCC_OscConfig+0x54>
 8000ec2:	f240 1167 	movw	r1, #359	; 0x167
 8000ec6:	48a5      	ldr	r0, [pc, #660]	; (800115c <HAL_RCC_OscConfig+0x2e4>)
 8000ec8:	f7ff fac2 	bl	8000450 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 809a 	beq.w	800100e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00e      	beq.n	8000f00 <HAL_RCC_OscConfig+0x88>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eea:	d009      	beq.n	8000f00 <HAL_RCC_OscConfig+0x88>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef4:	d004      	beq.n	8000f00 <HAL_RCC_OscConfig+0x88>
 8000ef6:	f240 116d 	movw	r1, #365	; 0x16d
 8000efa:	4898      	ldr	r0, [pc, #608]	; (800115c <HAL_RCC_OscConfig+0x2e4>)
 8000efc:	f7ff faa8 	bl	8000450 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f00:	4b97      	ldr	r3, [pc, #604]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d00c      	beq.n	8000f26 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f0c:	4b94      	ldr	r3, [pc, #592]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d112      	bne.n	8000f3e <HAL_RCC_OscConfig+0xc6>
 8000f18:	4b91      	ldr	r3, [pc, #580]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f24:	d10b      	bne.n	8000f3e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f26:	4b8e      	ldr	r3, [pc, #568]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d06c      	beq.n	800100c <HAL_RCC_OscConfig+0x194>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d168      	bne.n	800100c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e302      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f46:	d106      	bne.n	8000f56 <HAL_RCC_OscConfig+0xde>
 8000f48:	4b85      	ldr	r3, [pc, #532]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a84      	ldr	r2, [pc, #528]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e02e      	b.n	8000fb4 <HAL_RCC_OscConfig+0x13c>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x100>
 8000f5e:	4b80      	ldr	r3, [pc, #512]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7f      	ldr	r2, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a7c      	ldr	r2, [pc, #496]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e01d      	b.n	8000fb4 <HAL_RCC_OscConfig+0x13c>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x124>
 8000f82:	4b77      	ldr	r3, [pc, #476]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a76      	ldr	r2, [pc, #472]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b74      	ldr	r3, [pc, #464]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a73      	ldr	r2, [pc, #460]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e00b      	b.n	8000fb4 <HAL_RCC_OscConfig+0x13c>
 8000f9c:	4b70      	ldr	r3, [pc, #448]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a6f      	ldr	r2, [pc, #444]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b6d      	ldr	r3, [pc, #436]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a6c      	ldr	r2, [pc, #432]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fbb6 	bl	800072c <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fbb2 	bl	800072c <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	; 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e2b6      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	4b62      	ldr	r3, [pc, #392]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x14c>
 8000fe2:	e014      	b.n	800100e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fba2 	bl	800072c <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff fb9e 	bl	800072c <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	; 0x64
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e2a2      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	4b58      	ldr	r3, [pc, #352]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x174>
 800100a:	e000      	b.n	800100e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d079      	beq.n	800110e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d008      	beq.n	8001034 <HAL_RCC_OscConfig+0x1bc>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d004      	beq.n	8001034 <HAL_RCC_OscConfig+0x1bc>
 800102a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800102e:	484b      	ldr	r0, [pc, #300]	; (800115c <HAL_RCC_OscConfig+0x2e4>)
 8001030:	f7ff fa0e 	bl	8000450 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	2b1f      	cmp	r3, #31
 800103a:	d904      	bls.n	8001046 <HAL_RCC_OscConfig+0x1ce>
 800103c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001040:	4846      	ldr	r0, [pc, #280]	; (800115c <HAL_RCC_OscConfig+0x2e4>)
 8001042:	f7ff fa05 	bl	8000450 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00b      	beq.n	800106a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b08      	cmp	r3, #8
 800105c:	d11c      	bne.n	8001098 <HAL_RCC_OscConfig+0x220>
 800105e:	4b40      	ldr	r3, [pc, #256]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d116      	bne.n	8001098 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <HAL_RCC_OscConfig+0x20a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d001      	beq.n	8001082 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e260      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4933      	ldr	r1, [pc, #204]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	e03a      	b.n	800110e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d020      	beq.n	80010e2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_RCC_OscConfig+0x2ec>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a6:	f7ff fb41 	bl	800072c <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fb3d 	bl	800072c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e241      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4921      	ldr	r1, [pc, #132]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
 80010e0:	e015      	b.n	800110e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_RCC_OscConfig+0x2ec>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fb20 	bl	800072c <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f0:	f7ff fb1c 	bl	800072c <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e220      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_RCC_OscConfig+0x2e8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d048      	beq.n	80011ac <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <HAL_RCC_OscConfig+0x2bc>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d004      	beq.n	8001134 <HAL_RCC_OscConfig+0x2bc>
 800112a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800112e:	480b      	ldr	r0, [pc, #44]	; (800115c <HAL_RCC_OscConfig+0x2e4>)
 8001130:	f7ff f98e 	bl	8000450 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d021      	beq.n	8001180 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_RCC_OscConfig+0x2f0>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001142:	f7ff faf3 	bl	800072c <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001148:	e010      	b.n	800116c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114a:	f7ff faef 	bl	800072c <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d909      	bls.n	800116c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e1f3      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
 800115c:	08002940 	.word	0x08002940
 8001160:	40021000 	.word	0x40021000
 8001164:	42420000 	.word	0x42420000
 8001168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116c:	4b67      	ldr	r3, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x494>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0e8      	beq.n	800114a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f000 fbdd 	bl	8001938 <RCC_Delay>
 800117e:	e015      	b.n	80011ac <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001180:	4b63      	ldr	r3, [pc, #396]	; (8001310 <HAL_RCC_OscConfig+0x498>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fad1 	bl	800072c <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118e:	f7ff facd 	bl	800072c <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e1d1      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	4b5a      	ldr	r3, [pc, #360]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f0      	bne.n	800118e <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80c0 	beq.w	800133a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00c      	beq.n	80011e0 <HAL_RCC_OscConfig+0x368>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d008      	beq.n	80011e0 <HAL_RCC_OscConfig+0x368>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d004      	beq.n	80011e0 <HAL_RCC_OscConfig+0x368>
 80011d6:	f240 2111 	movw	r1, #529	; 0x211
 80011da:	484e      	ldr	r0, [pc, #312]	; (8001314 <HAL_RCC_OscConfig+0x49c>)
 80011dc:	f7ff f938 	bl	8000450 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e0:	4b4a      	ldr	r3, [pc, #296]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10d      	bne.n	8001208 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	4a46      	ldr	r2, [pc, #280]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	61d3      	str	r3, [r2, #28]
 80011f8:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001204:	2301      	movs	r3, #1
 8001206:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_RCC_OscConfig+0x4a0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d118      	bne.n	8001246 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001214:	4b40      	ldr	r3, [pc, #256]	; (8001318 <HAL_RCC_OscConfig+0x4a0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <HAL_RCC_OscConfig+0x4a0>)
 800121a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001220:	f7ff fa84 	bl	800072c <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001228:	f7ff fa80 	bl	800072c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e184      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_RCC_OscConfig+0x4a0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d106      	bne.n	800125c <HAL_RCC_OscConfig+0x3e4>
 800124e:	4b2f      	ldr	r3, [pc, #188]	; (800130c <HAL_RCC_OscConfig+0x494>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a2e      	ldr	r2, [pc, #184]	; (800130c <HAL_RCC_OscConfig+0x494>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	e02d      	b.n	80012b8 <HAL_RCC_OscConfig+0x440>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10c      	bne.n	800127e <HAL_RCC_OscConfig+0x406>
 8001264:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_RCC_OscConfig+0x494>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4a28      	ldr	r2, [pc, #160]	; (800130c <HAL_RCC_OscConfig+0x494>)
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6213      	str	r3, [r2, #32]
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_RCC_OscConfig+0x494>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <HAL_RCC_OscConfig+0x494>)
 8001276:	f023 0304 	bic.w	r3, r3, #4
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	e01c      	b.n	80012b8 <HAL_RCC_OscConfig+0x440>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x428>
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_RCC_OscConfig+0x494>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <HAL_RCC_OscConfig+0x494>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x494>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_RCC_OscConfig+0x494>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0x440>
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a16      	ldr	r2, [pc, #88]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80012b2:	f023 0304 	bic.w	r3, r3, #4
 80012b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d015      	beq.n	80012ec <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fa34 	bl	800072c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f7ff fa30 	bl	800072c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e132      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_OscConfig+0x494>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0ee      	beq.n	80012c8 <HAL_RCC_OscConfig+0x450>
 80012ea:	e01d      	b.n	8001328 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fa1e 	bl	800072c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f2:	e013      	b.n	800131c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	f7ff fa1a 	bl	800072c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d90a      	bls.n	800131c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e11c      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	42420480 	.word	0x42420480
 8001314:	08002940 	.word	0x08002940
 8001318:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	4b8b      	ldr	r3, [pc, #556]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e5      	bne.n	80012f4 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d105      	bne.n	800133a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132e:	4b87      	ldr	r3, [pc, #540]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a86      	ldr	r2, [pc, #536]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 8001334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00c      	beq.n	800135c <HAL_RCC_OscConfig+0x4e4>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d008      	beq.n	800135c <HAL_RCC_OscConfig+0x4e4>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d004      	beq.n	800135c <HAL_RCC_OscConfig+0x4e4>
 8001352:	f240 21af 	movw	r1, #687	; 0x2af
 8001356:	487e      	ldr	r0, [pc, #504]	; (8001550 <HAL_RCC_OscConfig+0x6d8>)
 8001358:	f7ff f87a 	bl	8000450 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80ee 	beq.w	8001542 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001366:	4b79      	ldr	r3, [pc, #484]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b08      	cmp	r3, #8
 8001370:	f000 80ce 	beq.w	8001510 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	2b02      	cmp	r3, #2
 800137a:	f040 80b2 	bne.w	80014e2 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <HAL_RCC_OscConfig+0x522>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138e:	d004      	beq.n	800139a <HAL_RCC_OscConfig+0x522>
 8001390:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001394:	486e      	ldr	r0, [pc, #440]	; (8001550 <HAL_RCC_OscConfig+0x6d8>)
 8001396:	f7ff f85b 	bl	8000450 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d04a      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013aa:	d045      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013b4:	d040      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80013be:	d03b      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013c8:	d036      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80013d2:	d031      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80013dc:	d02c      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80013e6:	d027      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013f0:	d022      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80013fa:	d01d      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001404:	d018      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001418:	d00e      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001422:	d009      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800142c:	d004      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c0>
 800142e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001432:	4847      	ldr	r0, [pc, #284]	; (8001550 <HAL_RCC_OscConfig+0x6d8>)
 8001434:	f7ff f80c 	bl	8000450 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <HAL_RCC_OscConfig+0x6dc>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff f975 	bl	800072c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff f971 	bl	800072c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e075      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001458:	4b3c      	ldr	r3, [pc, #240]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_RCC_OscConfig+0x612>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800147e:	d004      	beq.n	800148a <HAL_RCC_OscConfig+0x612>
 8001480:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001484:	4832      	ldr	r0, [pc, #200]	; (8001550 <HAL_RCC_OscConfig+0x6d8>)
 8001486:	f7fe ffe3 	bl	8000450 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	492d      	ldr	r1, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a19      	ldr	r1, [r3, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	430b      	orrs	r3, r1
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x6dc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff f937 	bl	800072c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff f933 	bl	800072c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e037      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x64a>
 80014e0:	e02f      	b.n	8001542 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_RCC_OscConfig+0x6dc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff f920 	bl	800072c <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff f91c 	bl	800072c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e020      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x678>
 800150e:	e018      	b.n	8001542 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e013      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_OscConfig+0x6d4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	429a      	cmp	r2, r3
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	08002940 	.word	0x08002940
 8001554:	42420060 	.word	0x42420060

08001558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e176      	b.n	800185a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d116      	bne.n	80015a6 <HAL_RCC_ClockConfig+0x4e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <HAL_RCC_ClockConfig+0x4e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10a      	bne.n	80015a6 <HAL_RCC_ClockConfig+0x4e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d104      	bne.n	80015a6 <HAL_RCC_ClockConfig+0x4e>
 800159c:	f44f 714e 	mov.w	r1, #824	; 0x338
 80015a0:	4874      	ldr	r0, [pc, #464]	; (8001774 <HAL_RCC_ClockConfig+0x21c>)
 80015a2:	f7fe ff55 	bl	8000450 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00a      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x6a>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d007      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x6a>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d004      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x6a>
 80015b8:	f240 3139 	movw	r1, #825	; 0x339
 80015bc:	486d      	ldr	r0, [pc, #436]	; (8001774 <HAL_RCC_ClockConfig+0x21c>)
 80015be:	f7fe ff47 	bl	8000450 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <HAL_RCC_ClockConfig+0x220>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d910      	bls.n	80015f2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d0:	4b69      	ldr	r3, [pc, #420]	; (8001778 <HAL_RCC_ClockConfig+0x220>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 0207 	bic.w	r2, r3, #7
 80015d8:	4967      	ldr	r1, [pc, #412]	; (8001778 <HAL_RCC_ClockConfig+0x220>)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e0:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_ClockConfig+0x220>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e133      	b.n	800185a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d049      	beq.n	8001692 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800160a:	4b5c      	ldr	r3, [pc, #368]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a5b      	ldr	r2, [pc, #364]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 8001610:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001614:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001622:	4b56      	ldr	r3, [pc, #344]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a55      	ldr	r2, [pc, #340]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 8001628:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800162c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d024      	beq.n	8001680 <HAL_RCC_ClockConfig+0x128>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b80      	cmp	r3, #128	; 0x80
 800163c:	d020      	beq.n	8001680 <HAL_RCC_ClockConfig+0x128>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b90      	cmp	r3, #144	; 0x90
 8001644:	d01c      	beq.n	8001680 <HAL_RCC_ClockConfig+0x128>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2ba0      	cmp	r3, #160	; 0xa0
 800164c:	d018      	beq.n	8001680 <HAL_RCC_ClockConfig+0x128>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2bb0      	cmp	r3, #176	; 0xb0
 8001654:	d014      	beq.n	8001680 <HAL_RCC_ClockConfig+0x128>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2bc0      	cmp	r3, #192	; 0xc0
 800165c:	d010      	beq.n	8001680 <HAL_RCC_ClockConfig+0x128>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2bd0      	cmp	r3, #208	; 0xd0
 8001664:	d00c      	beq.n	8001680 <HAL_RCC_ClockConfig+0x128>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2be0      	cmp	r3, #224	; 0xe0
 800166c:	d008      	beq.n	8001680 <HAL_RCC_ClockConfig+0x128>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2bf0      	cmp	r3, #240	; 0xf0
 8001674:	d004      	beq.n	8001680 <HAL_RCC_ClockConfig+0x128>
 8001676:	f240 315f 	movw	r1, #863	; 0x35f
 800167a:	483e      	ldr	r0, [pc, #248]	; (8001774 <HAL_RCC_ClockConfig+0x21c>)
 800167c:	f7fe fee8 	bl	8000450 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b3e      	ldr	r3, [pc, #248]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	493b      	ldr	r1, [pc, #236]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d051      	beq.n	8001742 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00c      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x168>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d008      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x168>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d004      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x168>
 80016b6:	f240 3166 	movw	r1, #870	; 0x366
 80016ba:	482e      	ldr	r0, [pc, #184]	; (8001774 <HAL_RCC_ClockConfig+0x21c>)
 80016bc:	f7fe fec8 	bl	8000450 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c8:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d115      	bne.n	8001700 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0c0      	b.n	800185a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0b4      	b.n	800185a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0ac      	b.n	800185a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 0203 	bic.w	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	491b      	ldr	r1, [pc, #108]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001712:	f7ff f80b 	bl	800072c <HAL_GetTick>
 8001716:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001718:	e00a      	b.n	8001730 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171a:	f7ff f807 	bl	800072c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e094      	b.n	800185a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_ClockConfig+0x224>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 020c 	and.w	r2, r3, #12
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	429a      	cmp	r2, r3
 8001740:	d1eb      	bne.n	800171a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_RCC_ClockConfig+0x220>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d217      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x220>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 0207 	bic.w	r2, r3, #7
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <HAL_RCC_ClockConfig+0x220>)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_RCC_ClockConfig+0x220>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d008      	beq.n	8001780 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e073      	b.n	800185a <HAL_RCC_ClockConfig+0x302>
 8001772:	bf00      	nop
 8001774:	08002940 	.word	0x08002940
 8001778:	40022000 	.word	0x40022000
 800177c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d025      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d018      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x26e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179c:	d013      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x26e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017a6:	d00e      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x26e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x26e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80017ba:	d004      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x26e>
 80017bc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80017c0:	4828      	ldr	r0, [pc, #160]	; (8001864 <HAL_RCC_ClockConfig+0x30c>)
 80017c2:	f7fe fe45 	bl	8000450 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_RCC_ClockConfig+0x310>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4925      	ldr	r1, [pc, #148]	; (8001868 <HAL_RCC_ClockConfig+0x310>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d026      	beq.n	8001832 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d018      	beq.n	800181e <HAL_RCC_ClockConfig+0x2c6>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f4:	d013      	beq.n	800181e <HAL_RCC_ClockConfig+0x2c6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017fe:	d00e      	beq.n	800181e <HAL_RCC_ClockConfig+0x2c6>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x2c6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001812:	d004      	beq.n	800181e <HAL_RCC_ClockConfig+0x2c6>
 8001814:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001818:	4812      	ldr	r0, [pc, #72]	; (8001864 <HAL_RCC_ClockConfig+0x30c>)
 800181a:	f7fe fe19 	bl	8000450 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_RCC_ClockConfig+0x310>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <HAL_RCC_ClockConfig+0x310>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001832:	f000 f821 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_ClockConfig+0x310>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	490a      	ldr	r1, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x314>)
 8001844:	5ccb      	ldrb	r3, [r1, r3]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x318>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x31c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe ff28 	bl	80006a8 <HAL_InitTick>

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	08002940 	.word	0x08002940
 8001868:	40021000 	.word	0x40021000
 800186c:	08002988 	.word	0x08002988
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	b490      	push	{r4, r7}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001880:	1d3c      	adds	r4, r7, #4
 8001882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001888:	f240 2301 	movw	r3, #513	; 0x201
 800188c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x40>
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d003      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x46>
 80018b6:	e02d      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ba:	623b      	str	r3, [r7, #32]
      break;
 80018bc:	e02d      	b.n	800191a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	0c9b      	lsrs	r3, r3, #18
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ca:	4413      	add	r3, r2
 80018cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	0c5b      	lsrs	r3, r3, #17
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ea:	4413      	add	r3, r2
 80018ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f6:	fb02 f203 	mul.w	r2, r2, r3
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	e004      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	623b      	str	r3, [r7, #32]
      break;
 8001912:	e002      	b.n	800191a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001916:	623b      	str	r3, [r7, #32]
      break;
 8001918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191a:	6a3b      	ldr	r3, [r7, #32]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bc90      	pop	{r4, r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	08002978 	.word	0x08002978
 800192c:	40021000 	.word	0x40021000
 8001930:	007a1200 	.word	0x007a1200
 8001934:	003d0900 	.word	0x003d0900

08001938 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <RCC_Delay+0x34>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <RCC_Delay+0x38>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	0a5b      	lsrs	r3, r3, #9
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001954:	bf00      	nop
  }
  while (Delay --);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1e5a      	subs	r2, r3, #1
 800195a:	60fa      	str	r2, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f9      	bne.n	8001954 <RCC_Delay+0x1c>
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20000000 	.word	0x20000000
 8001970:	10624dd3 	.word	0x10624dd3

08001974 <__errno>:
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <__errno+0x8>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2000000c 	.word	0x2000000c

08001980 <__libc_init_array>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	2600      	movs	r6, #0
 8001984:	4d0c      	ldr	r5, [pc, #48]	; (80019b8 <__libc_init_array+0x38>)
 8001986:	4c0d      	ldr	r4, [pc, #52]	; (80019bc <__libc_init_array+0x3c>)
 8001988:	1b64      	subs	r4, r4, r5
 800198a:	10a4      	asrs	r4, r4, #2
 800198c:	42a6      	cmp	r6, r4
 800198e:	d109      	bne.n	80019a4 <__libc_init_array+0x24>
 8001990:	f000 ff82 	bl	8002898 <_init>
 8001994:	2600      	movs	r6, #0
 8001996:	4d0a      	ldr	r5, [pc, #40]	; (80019c0 <__libc_init_array+0x40>)
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <__libc_init_array+0x44>)
 800199a:	1b64      	subs	r4, r4, r5
 800199c:	10a4      	asrs	r4, r4, #2
 800199e:	42a6      	cmp	r6, r4
 80019a0:	d105      	bne.n	80019ae <__libc_init_array+0x2e>
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
 80019a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019a8:	4798      	blx	r3
 80019aa:	3601      	adds	r6, #1
 80019ac:	e7ee      	b.n	800198c <__libc_init_array+0xc>
 80019ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80019b2:	4798      	blx	r3
 80019b4:	3601      	adds	r6, #1
 80019b6:	e7f2      	b.n	800199e <__libc_init_array+0x1e>
 80019b8:	08002a30 	.word	0x08002a30
 80019bc:	08002a30 	.word	0x08002a30
 80019c0:	08002a30 	.word	0x08002a30
 80019c4:	08002a34 	.word	0x08002a34

080019c8 <memset>:
 80019c8:	4603      	mov	r3, r0
 80019ca:	4402      	add	r2, r0
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d100      	bne.n	80019d2 <memset+0xa>
 80019d0:	4770      	bx	lr
 80019d2:	f803 1b01 	strb.w	r1, [r3], #1
 80019d6:	e7f9      	b.n	80019cc <memset+0x4>

080019d8 <iprintf>:
 80019d8:	b40f      	push	{r0, r1, r2, r3}
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <iprintf+0x2c>)
 80019dc:	b513      	push	{r0, r1, r4, lr}
 80019de:	681c      	ldr	r4, [r3, #0]
 80019e0:	b124      	cbz	r4, 80019ec <iprintf+0x14>
 80019e2:	69a3      	ldr	r3, [r4, #24]
 80019e4:	b913      	cbnz	r3, 80019ec <iprintf+0x14>
 80019e6:	4620      	mov	r0, r4
 80019e8:	f000 f866 	bl	8001ab8 <__sinit>
 80019ec:	ab05      	add	r3, sp, #20
 80019ee:	4620      	mov	r0, r4
 80019f0:	9a04      	ldr	r2, [sp, #16]
 80019f2:	68a1      	ldr	r1, [r4, #8]
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	f000 f981 	bl	8001cfc <_vfiprintf_r>
 80019fa:	b002      	add	sp, #8
 80019fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a00:	b004      	add	sp, #16
 8001a02:	4770      	bx	lr
 8001a04:	2000000c 	.word	0x2000000c

08001a08 <std>:
 8001a08:	2300      	movs	r3, #0
 8001a0a:	b510      	push	{r4, lr}
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8001a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a16:	6083      	str	r3, [r0, #8]
 8001a18:	8181      	strh	r1, [r0, #12]
 8001a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8001a1c:	81c2      	strh	r2, [r0, #14]
 8001a1e:	6183      	str	r3, [r0, #24]
 8001a20:	4619      	mov	r1, r3
 8001a22:	2208      	movs	r2, #8
 8001a24:	305c      	adds	r0, #92	; 0x5c
 8001a26:	f7ff ffcf 	bl	80019c8 <memset>
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <std+0x38>)
 8001a2c:	6224      	str	r4, [r4, #32]
 8001a2e:	6263      	str	r3, [r4, #36]	; 0x24
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <std+0x3c>)
 8001a32:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <std+0x40>)
 8001a36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <std+0x44>)
 8001a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8001a3c:	bd10      	pop	{r4, pc}
 8001a3e:	bf00      	nop
 8001a40:	080022a9 	.word	0x080022a9
 8001a44:	080022cb 	.word	0x080022cb
 8001a48:	08002303 	.word	0x08002303
 8001a4c:	08002327 	.word	0x08002327

08001a50 <_cleanup_r>:
 8001a50:	4901      	ldr	r1, [pc, #4]	; (8001a58 <_cleanup_r+0x8>)
 8001a52:	f000 b8af 	b.w	8001bb4 <_fwalk_reent>
 8001a56:	bf00      	nop
 8001a58:	08002601 	.word	0x08002601

08001a5c <__sfmoreglue>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	2568      	movs	r5, #104	; 0x68
 8001a60:	1e4a      	subs	r2, r1, #1
 8001a62:	4355      	muls	r5, r2
 8001a64:	460e      	mov	r6, r1
 8001a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a6a:	f000 f8c5 	bl	8001bf8 <_malloc_r>
 8001a6e:	4604      	mov	r4, r0
 8001a70:	b140      	cbz	r0, 8001a84 <__sfmoreglue+0x28>
 8001a72:	2100      	movs	r1, #0
 8001a74:	e9c0 1600 	strd	r1, r6, [r0]
 8001a78:	300c      	adds	r0, #12
 8001a7a:	60a0      	str	r0, [r4, #8]
 8001a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001a80:	f7ff ffa2 	bl	80019c8 <memset>
 8001a84:	4620      	mov	r0, r4
 8001a86:	bd70      	pop	{r4, r5, r6, pc}

08001a88 <__sfp_lock_acquire>:
 8001a88:	4801      	ldr	r0, [pc, #4]	; (8001a90 <__sfp_lock_acquire+0x8>)
 8001a8a:	f000 b8b3 	b.w	8001bf4 <__retarget_lock_acquire_recursive>
 8001a8e:	bf00      	nop
 8001a90:	200000a4 	.word	0x200000a4

08001a94 <__sfp_lock_release>:
 8001a94:	4801      	ldr	r0, [pc, #4]	; (8001a9c <__sfp_lock_release+0x8>)
 8001a96:	f000 b8ae 	b.w	8001bf6 <__retarget_lock_release_recursive>
 8001a9a:	bf00      	nop
 8001a9c:	200000a4 	.word	0x200000a4

08001aa0 <__sinit_lock_acquire>:
 8001aa0:	4801      	ldr	r0, [pc, #4]	; (8001aa8 <__sinit_lock_acquire+0x8>)
 8001aa2:	f000 b8a7 	b.w	8001bf4 <__retarget_lock_acquire_recursive>
 8001aa6:	bf00      	nop
 8001aa8:	2000009f 	.word	0x2000009f

08001aac <__sinit_lock_release>:
 8001aac:	4801      	ldr	r0, [pc, #4]	; (8001ab4 <__sinit_lock_release+0x8>)
 8001aae:	f000 b8a2 	b.w	8001bf6 <__retarget_lock_release_recursive>
 8001ab2:	bf00      	nop
 8001ab4:	2000009f 	.word	0x2000009f

08001ab8 <__sinit>:
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	4604      	mov	r4, r0
 8001abc:	f7ff fff0 	bl	8001aa0 <__sinit_lock_acquire>
 8001ac0:	69a3      	ldr	r3, [r4, #24]
 8001ac2:	b11b      	cbz	r3, 8001acc <__sinit+0x14>
 8001ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ac8:	f7ff bff0 	b.w	8001aac <__sinit_lock_release>
 8001acc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ad0:	6523      	str	r3, [r4, #80]	; 0x50
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <__sinit+0x68>)
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <__sinit+0x6c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ada:	42a3      	cmp	r3, r4
 8001adc:	bf08      	it	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	bf08      	it	eq
 8001ae4:	61a3      	streq	r3, [r4, #24]
 8001ae6:	f000 f81f 	bl	8001b28 <__sfp>
 8001aea:	6060      	str	r0, [r4, #4]
 8001aec:	4620      	mov	r0, r4
 8001aee:	f000 f81b 	bl	8001b28 <__sfp>
 8001af2:	60a0      	str	r0, [r4, #8]
 8001af4:	4620      	mov	r0, r4
 8001af6:	f000 f817 	bl	8001b28 <__sfp>
 8001afa:	2200      	movs	r2, #0
 8001afc:	2104      	movs	r1, #4
 8001afe:	60e0      	str	r0, [r4, #12]
 8001b00:	6860      	ldr	r0, [r4, #4]
 8001b02:	f7ff ff81 	bl	8001a08 <std>
 8001b06:	2201      	movs	r2, #1
 8001b08:	2109      	movs	r1, #9
 8001b0a:	68a0      	ldr	r0, [r4, #8]
 8001b0c:	f7ff ff7c 	bl	8001a08 <std>
 8001b10:	2202      	movs	r2, #2
 8001b12:	2112      	movs	r1, #18
 8001b14:	68e0      	ldr	r0, [r4, #12]
 8001b16:	f7ff ff77 	bl	8001a08 <std>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61a3      	str	r3, [r4, #24]
 8001b1e:	e7d1      	b.n	8001ac4 <__sinit+0xc>
 8001b20:	08002998 	.word	0x08002998
 8001b24:	08001a51 	.word	0x08001a51

08001b28 <__sfp>:
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	4607      	mov	r7, r0
 8001b2c:	f7ff ffac 	bl	8001a88 <__sfp_lock_acquire>
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <__sfp+0x84>)
 8001b32:	681e      	ldr	r6, [r3, #0]
 8001b34:	69b3      	ldr	r3, [r6, #24]
 8001b36:	b913      	cbnz	r3, 8001b3e <__sfp+0x16>
 8001b38:	4630      	mov	r0, r6
 8001b3a:	f7ff ffbd 	bl	8001ab8 <__sinit>
 8001b3e:	3648      	adds	r6, #72	; 0x48
 8001b40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	d503      	bpl.n	8001b50 <__sfp+0x28>
 8001b48:	6833      	ldr	r3, [r6, #0]
 8001b4a:	b30b      	cbz	r3, 8001b90 <__sfp+0x68>
 8001b4c:	6836      	ldr	r6, [r6, #0]
 8001b4e:	e7f7      	b.n	8001b40 <__sfp+0x18>
 8001b50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b54:	b9d5      	cbnz	r5, 8001b8c <__sfp+0x64>
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <__sfp+0x88>)
 8001b58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001b5c:	60e3      	str	r3, [r4, #12]
 8001b5e:	6665      	str	r5, [r4, #100]	; 0x64
 8001b60:	f000 f847 	bl	8001bf2 <__retarget_lock_init_recursive>
 8001b64:	f7ff ff96 	bl	8001a94 <__sfp_lock_release>
 8001b68:	2208      	movs	r2, #8
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001b74:	6025      	str	r5, [r4, #0]
 8001b76:	61a5      	str	r5, [r4, #24]
 8001b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b7c:	f7ff ff24 	bl	80019c8 <memset>
 8001b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001b84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001b88:	4620      	mov	r0, r4
 8001b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8c:	3468      	adds	r4, #104	; 0x68
 8001b8e:	e7d9      	b.n	8001b44 <__sfp+0x1c>
 8001b90:	2104      	movs	r1, #4
 8001b92:	4638      	mov	r0, r7
 8001b94:	f7ff ff62 	bl	8001a5c <__sfmoreglue>
 8001b98:	4604      	mov	r4, r0
 8001b9a:	6030      	str	r0, [r6, #0]
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d1d5      	bne.n	8001b4c <__sfp+0x24>
 8001ba0:	f7ff ff78 	bl	8001a94 <__sfp_lock_release>
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	e7ee      	b.n	8001b88 <__sfp+0x60>
 8001baa:	bf00      	nop
 8001bac:	08002998 	.word	0x08002998
 8001bb0:	ffff0001 	.word	0xffff0001

08001bb4 <_fwalk_reent>:
 8001bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bb8:	4606      	mov	r6, r0
 8001bba:	4688      	mov	r8, r1
 8001bbc:	2700      	movs	r7, #0
 8001bbe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001bc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001bc6:	f1b9 0901 	subs.w	r9, r9, #1
 8001bca:	d505      	bpl.n	8001bd8 <_fwalk_reent+0x24>
 8001bcc:	6824      	ldr	r4, [r4, #0]
 8001bce:	2c00      	cmp	r4, #0
 8001bd0:	d1f7      	bne.n	8001bc2 <_fwalk_reent+0xe>
 8001bd2:	4638      	mov	r0, r7
 8001bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bd8:	89ab      	ldrh	r3, [r5, #12]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d907      	bls.n	8001bee <_fwalk_reent+0x3a>
 8001bde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001be2:	3301      	adds	r3, #1
 8001be4:	d003      	beq.n	8001bee <_fwalk_reent+0x3a>
 8001be6:	4629      	mov	r1, r5
 8001be8:	4630      	mov	r0, r6
 8001bea:	47c0      	blx	r8
 8001bec:	4307      	orrs	r7, r0
 8001bee:	3568      	adds	r5, #104	; 0x68
 8001bf0:	e7e9      	b.n	8001bc6 <_fwalk_reent+0x12>

08001bf2 <__retarget_lock_init_recursive>:
 8001bf2:	4770      	bx	lr

08001bf4 <__retarget_lock_acquire_recursive>:
 8001bf4:	4770      	bx	lr

08001bf6 <__retarget_lock_release_recursive>:
 8001bf6:	4770      	bx	lr

08001bf8 <_malloc_r>:
 8001bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfa:	1ccd      	adds	r5, r1, #3
 8001bfc:	f025 0503 	bic.w	r5, r5, #3
 8001c00:	3508      	adds	r5, #8
 8001c02:	2d0c      	cmp	r5, #12
 8001c04:	bf38      	it	cc
 8001c06:	250c      	movcc	r5, #12
 8001c08:	2d00      	cmp	r5, #0
 8001c0a:	4606      	mov	r6, r0
 8001c0c:	db01      	blt.n	8001c12 <_malloc_r+0x1a>
 8001c0e:	42a9      	cmp	r1, r5
 8001c10:	d903      	bls.n	8001c1a <_malloc_r+0x22>
 8001c12:	230c      	movs	r3, #12
 8001c14:	6033      	str	r3, [r6, #0]
 8001c16:	2000      	movs	r0, #0
 8001c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c1a:	f000 fdb1 	bl	8002780 <__malloc_lock>
 8001c1e:	4921      	ldr	r1, [pc, #132]	; (8001ca4 <_malloc_r+0xac>)
 8001c20:	680a      	ldr	r2, [r1, #0]
 8001c22:	4614      	mov	r4, r2
 8001c24:	b99c      	cbnz	r4, 8001c4e <_malloc_r+0x56>
 8001c26:	4f20      	ldr	r7, [pc, #128]	; (8001ca8 <_malloc_r+0xb0>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b923      	cbnz	r3, 8001c36 <_malloc_r+0x3e>
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f000 fb2a 	bl	8002288 <_sbrk_r>
 8001c34:	6038      	str	r0, [r7, #0]
 8001c36:	4629      	mov	r1, r5
 8001c38:	4630      	mov	r0, r6
 8001c3a:	f000 fb25 	bl	8002288 <_sbrk_r>
 8001c3e:	1c43      	adds	r3, r0, #1
 8001c40:	d123      	bne.n	8001c8a <_malloc_r+0x92>
 8001c42:	230c      	movs	r3, #12
 8001c44:	4630      	mov	r0, r6
 8001c46:	6033      	str	r3, [r6, #0]
 8001c48:	f000 fda0 	bl	800278c <__malloc_unlock>
 8001c4c:	e7e3      	b.n	8001c16 <_malloc_r+0x1e>
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	1b5b      	subs	r3, r3, r5
 8001c52:	d417      	bmi.n	8001c84 <_malloc_r+0x8c>
 8001c54:	2b0b      	cmp	r3, #11
 8001c56:	d903      	bls.n	8001c60 <_malloc_r+0x68>
 8001c58:	6023      	str	r3, [r4, #0]
 8001c5a:	441c      	add	r4, r3
 8001c5c:	6025      	str	r5, [r4, #0]
 8001c5e:	e004      	b.n	8001c6a <_malloc_r+0x72>
 8001c60:	6863      	ldr	r3, [r4, #4]
 8001c62:	42a2      	cmp	r2, r4
 8001c64:	bf0c      	ite	eq
 8001c66:	600b      	streq	r3, [r1, #0]
 8001c68:	6053      	strne	r3, [r2, #4]
 8001c6a:	4630      	mov	r0, r6
 8001c6c:	f000 fd8e 	bl	800278c <__malloc_unlock>
 8001c70:	f104 000b 	add.w	r0, r4, #11
 8001c74:	1d23      	adds	r3, r4, #4
 8001c76:	f020 0007 	bic.w	r0, r0, #7
 8001c7a:	1ac2      	subs	r2, r0, r3
 8001c7c:	d0cc      	beq.n	8001c18 <_malloc_r+0x20>
 8001c7e:	1a1b      	subs	r3, r3, r0
 8001c80:	50a3      	str	r3, [r4, r2]
 8001c82:	e7c9      	b.n	8001c18 <_malloc_r+0x20>
 8001c84:	4622      	mov	r2, r4
 8001c86:	6864      	ldr	r4, [r4, #4]
 8001c88:	e7cc      	b.n	8001c24 <_malloc_r+0x2c>
 8001c8a:	1cc4      	adds	r4, r0, #3
 8001c8c:	f024 0403 	bic.w	r4, r4, #3
 8001c90:	42a0      	cmp	r0, r4
 8001c92:	d0e3      	beq.n	8001c5c <_malloc_r+0x64>
 8001c94:	1a21      	subs	r1, r4, r0
 8001c96:	4630      	mov	r0, r6
 8001c98:	f000 faf6 	bl	8002288 <_sbrk_r>
 8001c9c:	3001      	adds	r0, #1
 8001c9e:	d1dd      	bne.n	8001c5c <_malloc_r+0x64>
 8001ca0:	e7cf      	b.n	8001c42 <_malloc_r+0x4a>
 8001ca2:	bf00      	nop
 8001ca4:	20000090 	.word	0x20000090
 8001ca8:	20000094 	.word	0x20000094

08001cac <__sfputc_r>:
 8001cac:	6893      	ldr	r3, [r2, #8]
 8001cae:	b410      	push	{r4}
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	6093      	str	r3, [r2, #8]
 8001cb6:	da07      	bge.n	8001cc8 <__sfputc_r+0x1c>
 8001cb8:	6994      	ldr	r4, [r2, #24]
 8001cba:	42a3      	cmp	r3, r4
 8001cbc:	db01      	blt.n	8001cc2 <__sfputc_r+0x16>
 8001cbe:	290a      	cmp	r1, #10
 8001cc0:	d102      	bne.n	8001cc8 <__sfputc_r+0x1c>
 8001cc2:	bc10      	pop	{r4}
 8001cc4:	f000 bb34 	b.w	8002330 <__swbuf_r>
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	1c58      	adds	r0, r3, #1
 8001ccc:	6010      	str	r0, [r2, #0]
 8001cce:	7019      	strb	r1, [r3, #0]
 8001cd0:	4608      	mov	r0, r1
 8001cd2:	bc10      	pop	{r4}
 8001cd4:	4770      	bx	lr

08001cd6 <__sfputs_r>:
 8001cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd8:	4606      	mov	r6, r0
 8001cda:	460f      	mov	r7, r1
 8001cdc:	4614      	mov	r4, r2
 8001cde:	18d5      	adds	r5, r2, r3
 8001ce0:	42ac      	cmp	r4, r5
 8001ce2:	d101      	bne.n	8001ce8 <__sfputs_r+0x12>
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	e007      	b.n	8001cf8 <__sfputs_r+0x22>
 8001ce8:	463a      	mov	r2, r7
 8001cea:	4630      	mov	r0, r6
 8001cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cf0:	f7ff ffdc 	bl	8001cac <__sfputc_r>
 8001cf4:	1c43      	adds	r3, r0, #1
 8001cf6:	d1f3      	bne.n	8001ce0 <__sfputs_r+0xa>
 8001cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cfc <_vfiprintf_r>:
 8001cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d00:	460d      	mov	r5, r1
 8001d02:	4614      	mov	r4, r2
 8001d04:	4698      	mov	r8, r3
 8001d06:	4606      	mov	r6, r0
 8001d08:	b09d      	sub	sp, #116	; 0x74
 8001d0a:	b118      	cbz	r0, 8001d14 <_vfiprintf_r+0x18>
 8001d0c:	6983      	ldr	r3, [r0, #24]
 8001d0e:	b90b      	cbnz	r3, 8001d14 <_vfiprintf_r+0x18>
 8001d10:	f7ff fed2 	bl	8001ab8 <__sinit>
 8001d14:	4b89      	ldr	r3, [pc, #548]	; (8001f3c <_vfiprintf_r+0x240>)
 8001d16:	429d      	cmp	r5, r3
 8001d18:	d11b      	bne.n	8001d52 <_vfiprintf_r+0x56>
 8001d1a:	6875      	ldr	r5, [r6, #4]
 8001d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d1e:	07d9      	lsls	r1, r3, #31
 8001d20:	d405      	bmi.n	8001d2e <_vfiprintf_r+0x32>
 8001d22:	89ab      	ldrh	r3, [r5, #12]
 8001d24:	059a      	lsls	r2, r3, #22
 8001d26:	d402      	bmi.n	8001d2e <_vfiprintf_r+0x32>
 8001d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d2a:	f7ff ff63 	bl	8001bf4 <__retarget_lock_acquire_recursive>
 8001d2e:	89ab      	ldrh	r3, [r5, #12]
 8001d30:	071b      	lsls	r3, r3, #28
 8001d32:	d501      	bpl.n	8001d38 <_vfiprintf_r+0x3c>
 8001d34:	692b      	ldr	r3, [r5, #16]
 8001d36:	b9eb      	cbnz	r3, 8001d74 <_vfiprintf_r+0x78>
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f000 fb5c 	bl	80023f8 <__swsetup_r>
 8001d40:	b1c0      	cbz	r0, 8001d74 <_vfiprintf_r+0x78>
 8001d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d44:	07dc      	lsls	r4, r3, #31
 8001d46:	d50e      	bpl.n	8001d66 <_vfiprintf_r+0x6a>
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	b01d      	add	sp, #116	; 0x74
 8001d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d52:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <_vfiprintf_r+0x244>)
 8001d54:	429d      	cmp	r5, r3
 8001d56:	d101      	bne.n	8001d5c <_vfiprintf_r+0x60>
 8001d58:	68b5      	ldr	r5, [r6, #8]
 8001d5a:	e7df      	b.n	8001d1c <_vfiprintf_r+0x20>
 8001d5c:	4b79      	ldr	r3, [pc, #484]	; (8001f44 <_vfiprintf_r+0x248>)
 8001d5e:	429d      	cmp	r5, r3
 8001d60:	bf08      	it	eq
 8001d62:	68f5      	ldreq	r5, [r6, #12]
 8001d64:	e7da      	b.n	8001d1c <_vfiprintf_r+0x20>
 8001d66:	89ab      	ldrh	r3, [r5, #12]
 8001d68:	0598      	lsls	r0, r3, #22
 8001d6a:	d4ed      	bmi.n	8001d48 <_vfiprintf_r+0x4c>
 8001d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d6e:	f7ff ff42 	bl	8001bf6 <__retarget_lock_release_recursive>
 8001d72:	e7e9      	b.n	8001d48 <_vfiprintf_r+0x4c>
 8001d74:	2300      	movs	r3, #0
 8001d76:	9309      	str	r3, [sp, #36]	; 0x24
 8001d78:	2320      	movs	r3, #32
 8001d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d7e:	2330      	movs	r3, #48	; 0x30
 8001d80:	f04f 0901 	mov.w	r9, #1
 8001d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d88:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001f48 <_vfiprintf_r+0x24c>
 8001d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d90:	4623      	mov	r3, r4
 8001d92:	469a      	mov	sl, r3
 8001d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d98:	b10a      	cbz	r2, 8001d9e <_vfiprintf_r+0xa2>
 8001d9a:	2a25      	cmp	r2, #37	; 0x25
 8001d9c:	d1f9      	bne.n	8001d92 <_vfiprintf_r+0x96>
 8001d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8001da2:	d00b      	beq.n	8001dbc <_vfiprintf_r+0xc0>
 8001da4:	465b      	mov	r3, fp
 8001da6:	4622      	mov	r2, r4
 8001da8:	4629      	mov	r1, r5
 8001daa:	4630      	mov	r0, r6
 8001dac:	f7ff ff93 	bl	8001cd6 <__sfputs_r>
 8001db0:	3001      	adds	r0, #1
 8001db2:	f000 80aa 	beq.w	8001f0a <_vfiprintf_r+0x20e>
 8001db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001db8:	445a      	add	r2, fp
 8001dba:	9209      	str	r2, [sp, #36]	; 0x24
 8001dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a2 	beq.w	8001f0a <_vfiprintf_r+0x20e>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001dd0:	f10a 0a01 	add.w	sl, sl, #1
 8001dd4:	9304      	str	r3, [sp, #16]
 8001dd6:	9307      	str	r3, [sp, #28]
 8001dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8001dde:	4654      	mov	r4, sl
 8001de0:	2205      	movs	r2, #5
 8001de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001de6:	4858      	ldr	r0, [pc, #352]	; (8001f48 <_vfiprintf_r+0x24c>)
 8001de8:	f000 fcbc 	bl	8002764 <memchr>
 8001dec:	9a04      	ldr	r2, [sp, #16]
 8001dee:	b9d8      	cbnz	r0, 8001e28 <_vfiprintf_r+0x12c>
 8001df0:	06d1      	lsls	r1, r2, #27
 8001df2:	bf44      	itt	mi
 8001df4:	2320      	movmi	r3, #32
 8001df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dfa:	0713      	lsls	r3, r2, #28
 8001dfc:	bf44      	itt	mi
 8001dfe:	232b      	movmi	r3, #43	; 0x2b
 8001e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e04:	f89a 3000 	ldrb.w	r3, [sl]
 8001e08:	2b2a      	cmp	r3, #42	; 0x2a
 8001e0a:	d015      	beq.n	8001e38 <_vfiprintf_r+0x13c>
 8001e0c:	4654      	mov	r4, sl
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f04f 0c0a 	mov.w	ip, #10
 8001e14:	9a07      	ldr	r2, [sp, #28]
 8001e16:	4621      	mov	r1, r4
 8001e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e1c:	3b30      	subs	r3, #48	; 0x30
 8001e1e:	2b09      	cmp	r3, #9
 8001e20:	d94e      	bls.n	8001ec0 <_vfiprintf_r+0x1c4>
 8001e22:	b1b0      	cbz	r0, 8001e52 <_vfiprintf_r+0x156>
 8001e24:	9207      	str	r2, [sp, #28]
 8001e26:	e014      	b.n	8001e52 <_vfiprintf_r+0x156>
 8001e28:	eba0 0308 	sub.w	r3, r0, r8
 8001e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	46a2      	mov	sl, r4
 8001e34:	9304      	str	r3, [sp, #16]
 8001e36:	e7d2      	b.n	8001dde <_vfiprintf_r+0xe2>
 8001e38:	9b03      	ldr	r3, [sp, #12]
 8001e3a:	1d19      	adds	r1, r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	9103      	str	r1, [sp, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bfbb      	ittet	lt
 8001e44:	425b      	neglt	r3, r3
 8001e46:	f042 0202 	orrlt.w	r2, r2, #2
 8001e4a:	9307      	strge	r3, [sp, #28]
 8001e4c:	9307      	strlt	r3, [sp, #28]
 8001e4e:	bfb8      	it	lt
 8001e50:	9204      	strlt	r2, [sp, #16]
 8001e52:	7823      	ldrb	r3, [r4, #0]
 8001e54:	2b2e      	cmp	r3, #46	; 0x2e
 8001e56:	d10c      	bne.n	8001e72 <_vfiprintf_r+0x176>
 8001e58:	7863      	ldrb	r3, [r4, #1]
 8001e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e5c:	d135      	bne.n	8001eca <_vfiprintf_r+0x1ce>
 8001e5e:	9b03      	ldr	r3, [sp, #12]
 8001e60:	3402      	adds	r4, #2
 8001e62:	1d1a      	adds	r2, r3, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	9203      	str	r2, [sp, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bfb8      	it	lt
 8001e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e70:	9305      	str	r3, [sp, #20]
 8001e72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001f58 <_vfiprintf_r+0x25c>
 8001e76:	2203      	movs	r2, #3
 8001e78:	4650      	mov	r0, sl
 8001e7a:	7821      	ldrb	r1, [r4, #0]
 8001e7c:	f000 fc72 	bl	8002764 <memchr>
 8001e80:	b140      	cbz	r0, 8001e94 <_vfiprintf_r+0x198>
 8001e82:	2340      	movs	r3, #64	; 0x40
 8001e84:	eba0 000a 	sub.w	r0, r0, sl
 8001e88:	fa03 f000 	lsl.w	r0, r3, r0
 8001e8c:	9b04      	ldr	r3, [sp, #16]
 8001e8e:	3401      	adds	r4, #1
 8001e90:	4303      	orrs	r3, r0
 8001e92:	9304      	str	r3, [sp, #16]
 8001e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e98:	2206      	movs	r2, #6
 8001e9a:	482c      	ldr	r0, [pc, #176]	; (8001f4c <_vfiprintf_r+0x250>)
 8001e9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ea0:	f000 fc60 	bl	8002764 <memchr>
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d03f      	beq.n	8001f28 <_vfiprintf_r+0x22c>
 8001ea8:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <_vfiprintf_r+0x254>)
 8001eaa:	bb1b      	cbnz	r3, 8001ef4 <_vfiprintf_r+0x1f8>
 8001eac:	9b03      	ldr	r3, [sp, #12]
 8001eae:	3307      	adds	r3, #7
 8001eb0:	f023 0307 	bic.w	r3, r3, #7
 8001eb4:	3308      	adds	r3, #8
 8001eb6:	9303      	str	r3, [sp, #12]
 8001eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eba:	443b      	add	r3, r7
 8001ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8001ebe:	e767      	b.n	8001d90 <_vfiprintf_r+0x94>
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ec8:	e7a5      	b.n	8001e16 <_vfiprintf_r+0x11a>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f04f 0c0a 	mov.w	ip, #10
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	3401      	adds	r4, #1
 8001ed4:	9305      	str	r3, [sp, #20]
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001edc:	3a30      	subs	r2, #48	; 0x30
 8001ede:	2a09      	cmp	r2, #9
 8001ee0:	d903      	bls.n	8001eea <_vfiprintf_r+0x1ee>
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0c5      	beq.n	8001e72 <_vfiprintf_r+0x176>
 8001ee6:	9105      	str	r1, [sp, #20]
 8001ee8:	e7c3      	b.n	8001e72 <_vfiprintf_r+0x176>
 8001eea:	4604      	mov	r4, r0
 8001eec:	2301      	movs	r3, #1
 8001eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ef2:	e7f0      	b.n	8001ed6 <_vfiprintf_r+0x1da>
 8001ef4:	ab03      	add	r3, sp, #12
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	462a      	mov	r2, r5
 8001efa:	4630      	mov	r0, r6
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <_vfiprintf_r+0x258>)
 8001efe:	a904      	add	r1, sp, #16
 8001f00:	f3af 8000 	nop.w
 8001f04:	4607      	mov	r7, r0
 8001f06:	1c78      	adds	r0, r7, #1
 8001f08:	d1d6      	bne.n	8001eb8 <_vfiprintf_r+0x1bc>
 8001f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f0c:	07d9      	lsls	r1, r3, #31
 8001f0e:	d405      	bmi.n	8001f1c <_vfiprintf_r+0x220>
 8001f10:	89ab      	ldrh	r3, [r5, #12]
 8001f12:	059a      	lsls	r2, r3, #22
 8001f14:	d402      	bmi.n	8001f1c <_vfiprintf_r+0x220>
 8001f16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f18:	f7ff fe6d 	bl	8001bf6 <__retarget_lock_release_recursive>
 8001f1c:	89ab      	ldrh	r3, [r5, #12]
 8001f1e:	065b      	lsls	r3, r3, #25
 8001f20:	f53f af12 	bmi.w	8001d48 <_vfiprintf_r+0x4c>
 8001f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f26:	e711      	b.n	8001d4c <_vfiprintf_r+0x50>
 8001f28:	ab03      	add	r3, sp, #12
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	462a      	mov	r2, r5
 8001f2e:	4630      	mov	r0, r6
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_vfiprintf_r+0x258>)
 8001f32:	a904      	add	r1, sp, #16
 8001f34:	f000 f882 	bl	800203c <_printf_i>
 8001f38:	e7e4      	b.n	8001f04 <_vfiprintf_r+0x208>
 8001f3a:	bf00      	nop
 8001f3c:	080029bc 	.word	0x080029bc
 8001f40:	080029dc 	.word	0x080029dc
 8001f44:	0800299c 	.word	0x0800299c
 8001f48:	080029fc 	.word	0x080029fc
 8001f4c:	08002a06 	.word	0x08002a06
 8001f50:	00000000 	.word	0x00000000
 8001f54:	08001cd7 	.word	0x08001cd7
 8001f58:	08002a02 	.word	0x08002a02

08001f5c <_printf_common>:
 8001f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f60:	4616      	mov	r6, r2
 8001f62:	4699      	mov	r9, r3
 8001f64:	688a      	ldr	r2, [r1, #8]
 8001f66:	690b      	ldr	r3, [r1, #16]
 8001f68:	4607      	mov	r7, r0
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	bfb8      	it	lt
 8001f6e:	4613      	movlt	r3, r2
 8001f70:	6033      	str	r3, [r6, #0]
 8001f72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f76:	460c      	mov	r4, r1
 8001f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f7c:	b10a      	cbz	r2, 8001f82 <_printf_common+0x26>
 8001f7e:	3301      	adds	r3, #1
 8001f80:	6033      	str	r3, [r6, #0]
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	0699      	lsls	r1, r3, #26
 8001f86:	bf42      	ittt	mi
 8001f88:	6833      	ldrmi	r3, [r6, #0]
 8001f8a:	3302      	addmi	r3, #2
 8001f8c:	6033      	strmi	r3, [r6, #0]
 8001f8e:	6825      	ldr	r5, [r4, #0]
 8001f90:	f015 0506 	ands.w	r5, r5, #6
 8001f94:	d106      	bne.n	8001fa4 <_printf_common+0x48>
 8001f96:	f104 0a19 	add.w	sl, r4, #25
 8001f9a:	68e3      	ldr	r3, [r4, #12]
 8001f9c:	6832      	ldr	r2, [r6, #0]
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	42ab      	cmp	r3, r5
 8001fa2:	dc28      	bgt.n	8001ff6 <_printf_common+0x9a>
 8001fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001fa8:	1e13      	subs	r3, r2, #0
 8001faa:	6822      	ldr	r2, [r4, #0]
 8001fac:	bf18      	it	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	0692      	lsls	r2, r2, #26
 8001fb2:	d42d      	bmi.n	8002010 <_printf_common+0xb4>
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	4638      	mov	r0, r7
 8001fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fbc:	47c0      	blx	r8
 8001fbe:	3001      	adds	r0, #1
 8001fc0:	d020      	beq.n	8002004 <_printf_common+0xa8>
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	68e5      	ldr	r5, [r4, #12]
 8001fc6:	f003 0306 	and.w	r3, r3, #6
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf18      	it	ne
 8001fce:	2500      	movne	r5, #0
 8001fd0:	6832      	ldr	r2, [r6, #0]
 8001fd2:	f04f 0600 	mov.w	r6, #0
 8001fd6:	68a3      	ldr	r3, [r4, #8]
 8001fd8:	bf08      	it	eq
 8001fda:	1aad      	subeq	r5, r5, r2
 8001fdc:	6922      	ldr	r2, [r4, #16]
 8001fde:	bf08      	it	eq
 8001fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	bfc4      	itt	gt
 8001fe8:	1a9b      	subgt	r3, r3, r2
 8001fea:	18ed      	addgt	r5, r5, r3
 8001fec:	341a      	adds	r4, #26
 8001fee:	42b5      	cmp	r5, r6
 8001ff0:	d11a      	bne.n	8002028 <_printf_common+0xcc>
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	e008      	b.n	8002008 <_printf_common+0xac>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	4652      	mov	r2, sl
 8001ffa:	4649      	mov	r1, r9
 8001ffc:	4638      	mov	r0, r7
 8001ffe:	47c0      	blx	r8
 8002000:	3001      	adds	r0, #1
 8002002:	d103      	bne.n	800200c <_printf_common+0xb0>
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800200c:	3501      	adds	r5, #1
 800200e:	e7c4      	b.n	8001f9a <_printf_common+0x3e>
 8002010:	2030      	movs	r0, #48	; 0x30
 8002012:	18e1      	adds	r1, r4, r3
 8002014:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800201e:	4422      	add	r2, r4
 8002020:	3302      	adds	r3, #2
 8002022:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002026:	e7c5      	b.n	8001fb4 <_printf_common+0x58>
 8002028:	2301      	movs	r3, #1
 800202a:	4622      	mov	r2, r4
 800202c:	4649      	mov	r1, r9
 800202e:	4638      	mov	r0, r7
 8002030:	47c0      	blx	r8
 8002032:	3001      	adds	r0, #1
 8002034:	d0e6      	beq.n	8002004 <_printf_common+0xa8>
 8002036:	3601      	adds	r6, #1
 8002038:	e7d9      	b.n	8001fee <_printf_common+0x92>
	...

0800203c <_printf_i>:
 800203c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002040:	460c      	mov	r4, r1
 8002042:	7e27      	ldrb	r7, [r4, #24]
 8002044:	4691      	mov	r9, r2
 8002046:	2f78      	cmp	r7, #120	; 0x78
 8002048:	4680      	mov	r8, r0
 800204a:	469a      	mov	sl, r3
 800204c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800204e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002052:	d807      	bhi.n	8002064 <_printf_i+0x28>
 8002054:	2f62      	cmp	r7, #98	; 0x62
 8002056:	d80a      	bhi.n	800206e <_printf_i+0x32>
 8002058:	2f00      	cmp	r7, #0
 800205a:	f000 80d9 	beq.w	8002210 <_printf_i+0x1d4>
 800205e:	2f58      	cmp	r7, #88	; 0x58
 8002060:	f000 80a4 	beq.w	80021ac <_printf_i+0x170>
 8002064:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800206c:	e03a      	b.n	80020e4 <_printf_i+0xa8>
 800206e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002072:	2b15      	cmp	r3, #21
 8002074:	d8f6      	bhi.n	8002064 <_printf_i+0x28>
 8002076:	a001      	add	r0, pc, #4	; (adr r0, 800207c <_printf_i+0x40>)
 8002078:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800207c:	080020d5 	.word	0x080020d5
 8002080:	080020e9 	.word	0x080020e9
 8002084:	08002065 	.word	0x08002065
 8002088:	08002065 	.word	0x08002065
 800208c:	08002065 	.word	0x08002065
 8002090:	08002065 	.word	0x08002065
 8002094:	080020e9 	.word	0x080020e9
 8002098:	08002065 	.word	0x08002065
 800209c:	08002065 	.word	0x08002065
 80020a0:	08002065 	.word	0x08002065
 80020a4:	08002065 	.word	0x08002065
 80020a8:	080021f7 	.word	0x080021f7
 80020ac:	08002119 	.word	0x08002119
 80020b0:	080021d9 	.word	0x080021d9
 80020b4:	08002065 	.word	0x08002065
 80020b8:	08002065 	.word	0x08002065
 80020bc:	08002219 	.word	0x08002219
 80020c0:	08002065 	.word	0x08002065
 80020c4:	08002119 	.word	0x08002119
 80020c8:	08002065 	.word	0x08002065
 80020cc:	08002065 	.word	0x08002065
 80020d0:	080021e1 	.word	0x080021e1
 80020d4:	680b      	ldr	r3, [r1, #0]
 80020d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80020da:	1d1a      	adds	r2, r3, #4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	600a      	str	r2, [r1, #0]
 80020e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0a4      	b.n	8002232 <_printf_i+0x1f6>
 80020e8:	6825      	ldr	r5, [r4, #0]
 80020ea:	6808      	ldr	r0, [r1, #0]
 80020ec:	062e      	lsls	r6, r5, #24
 80020ee:	f100 0304 	add.w	r3, r0, #4
 80020f2:	d50a      	bpl.n	800210a <_printf_i+0xce>
 80020f4:	6805      	ldr	r5, [r0, #0]
 80020f6:	600b      	str	r3, [r1, #0]
 80020f8:	2d00      	cmp	r5, #0
 80020fa:	da03      	bge.n	8002104 <_printf_i+0xc8>
 80020fc:	232d      	movs	r3, #45	; 0x2d
 80020fe:	426d      	negs	r5, r5
 8002100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002104:	230a      	movs	r3, #10
 8002106:	485e      	ldr	r0, [pc, #376]	; (8002280 <_printf_i+0x244>)
 8002108:	e019      	b.n	800213e <_printf_i+0x102>
 800210a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800210e:	6805      	ldr	r5, [r0, #0]
 8002110:	600b      	str	r3, [r1, #0]
 8002112:	bf18      	it	ne
 8002114:	b22d      	sxthne	r5, r5
 8002116:	e7ef      	b.n	80020f8 <_printf_i+0xbc>
 8002118:	680b      	ldr	r3, [r1, #0]
 800211a:	6825      	ldr	r5, [r4, #0]
 800211c:	1d18      	adds	r0, r3, #4
 800211e:	6008      	str	r0, [r1, #0]
 8002120:	0628      	lsls	r0, r5, #24
 8002122:	d501      	bpl.n	8002128 <_printf_i+0xec>
 8002124:	681d      	ldr	r5, [r3, #0]
 8002126:	e002      	b.n	800212e <_printf_i+0xf2>
 8002128:	0669      	lsls	r1, r5, #25
 800212a:	d5fb      	bpl.n	8002124 <_printf_i+0xe8>
 800212c:	881d      	ldrh	r5, [r3, #0]
 800212e:	2f6f      	cmp	r7, #111	; 0x6f
 8002130:	bf0c      	ite	eq
 8002132:	2308      	moveq	r3, #8
 8002134:	230a      	movne	r3, #10
 8002136:	4852      	ldr	r0, [pc, #328]	; (8002280 <_printf_i+0x244>)
 8002138:	2100      	movs	r1, #0
 800213a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800213e:	6866      	ldr	r6, [r4, #4]
 8002140:	2e00      	cmp	r6, #0
 8002142:	bfa8      	it	ge
 8002144:	6821      	ldrge	r1, [r4, #0]
 8002146:	60a6      	str	r6, [r4, #8]
 8002148:	bfa4      	itt	ge
 800214a:	f021 0104 	bicge.w	r1, r1, #4
 800214e:	6021      	strge	r1, [r4, #0]
 8002150:	b90d      	cbnz	r5, 8002156 <_printf_i+0x11a>
 8002152:	2e00      	cmp	r6, #0
 8002154:	d04d      	beq.n	80021f2 <_printf_i+0x1b6>
 8002156:	4616      	mov	r6, r2
 8002158:	fbb5 f1f3 	udiv	r1, r5, r3
 800215c:	fb03 5711 	mls	r7, r3, r1, r5
 8002160:	5dc7      	ldrb	r7, [r0, r7]
 8002162:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002166:	462f      	mov	r7, r5
 8002168:	42bb      	cmp	r3, r7
 800216a:	460d      	mov	r5, r1
 800216c:	d9f4      	bls.n	8002158 <_printf_i+0x11c>
 800216e:	2b08      	cmp	r3, #8
 8002170:	d10b      	bne.n	800218a <_printf_i+0x14e>
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	07df      	lsls	r7, r3, #31
 8002176:	d508      	bpl.n	800218a <_printf_i+0x14e>
 8002178:	6923      	ldr	r3, [r4, #16]
 800217a:	6861      	ldr	r1, [r4, #4]
 800217c:	4299      	cmp	r1, r3
 800217e:	bfde      	ittt	le
 8002180:	2330      	movle	r3, #48	; 0x30
 8002182:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002186:	f106 36ff 	addle.w	r6, r6, #4294967295
 800218a:	1b92      	subs	r2, r2, r6
 800218c:	6122      	str	r2, [r4, #16]
 800218e:	464b      	mov	r3, r9
 8002190:	4621      	mov	r1, r4
 8002192:	4640      	mov	r0, r8
 8002194:	f8cd a000 	str.w	sl, [sp]
 8002198:	aa03      	add	r2, sp, #12
 800219a:	f7ff fedf 	bl	8001f5c <_printf_common>
 800219e:	3001      	adds	r0, #1
 80021a0:	d14c      	bne.n	800223c <_printf_i+0x200>
 80021a2:	f04f 30ff 	mov.w	r0, #4294967295
 80021a6:	b004      	add	sp, #16
 80021a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ac:	4834      	ldr	r0, [pc, #208]	; (8002280 <_printf_i+0x244>)
 80021ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80021b2:	680e      	ldr	r6, [r1, #0]
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80021ba:	061f      	lsls	r7, r3, #24
 80021bc:	600e      	str	r6, [r1, #0]
 80021be:	d514      	bpl.n	80021ea <_printf_i+0x1ae>
 80021c0:	07d9      	lsls	r1, r3, #31
 80021c2:	bf44      	itt	mi
 80021c4:	f043 0320 	orrmi.w	r3, r3, #32
 80021c8:	6023      	strmi	r3, [r4, #0]
 80021ca:	b91d      	cbnz	r5, 80021d4 <_printf_i+0x198>
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	f023 0320 	bic.w	r3, r3, #32
 80021d2:	6023      	str	r3, [r4, #0]
 80021d4:	2310      	movs	r3, #16
 80021d6:	e7af      	b.n	8002138 <_printf_i+0xfc>
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	f043 0320 	orr.w	r3, r3, #32
 80021de:	6023      	str	r3, [r4, #0]
 80021e0:	2378      	movs	r3, #120	; 0x78
 80021e2:	4828      	ldr	r0, [pc, #160]	; (8002284 <_printf_i+0x248>)
 80021e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021e8:	e7e3      	b.n	80021b2 <_printf_i+0x176>
 80021ea:	065e      	lsls	r6, r3, #25
 80021ec:	bf48      	it	mi
 80021ee:	b2ad      	uxthmi	r5, r5
 80021f0:	e7e6      	b.n	80021c0 <_printf_i+0x184>
 80021f2:	4616      	mov	r6, r2
 80021f4:	e7bb      	b.n	800216e <_printf_i+0x132>
 80021f6:	680b      	ldr	r3, [r1, #0]
 80021f8:	6826      	ldr	r6, [r4, #0]
 80021fa:	1d1d      	adds	r5, r3, #4
 80021fc:	6960      	ldr	r0, [r4, #20]
 80021fe:	600d      	str	r5, [r1, #0]
 8002200:	0635      	lsls	r5, r6, #24
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	d501      	bpl.n	800220a <_printf_i+0x1ce>
 8002206:	6018      	str	r0, [r3, #0]
 8002208:	e002      	b.n	8002210 <_printf_i+0x1d4>
 800220a:	0671      	lsls	r1, r6, #25
 800220c:	d5fb      	bpl.n	8002206 <_printf_i+0x1ca>
 800220e:	8018      	strh	r0, [r3, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	4616      	mov	r6, r2
 8002214:	6123      	str	r3, [r4, #16]
 8002216:	e7ba      	b.n	800218e <_printf_i+0x152>
 8002218:	680b      	ldr	r3, [r1, #0]
 800221a:	1d1a      	adds	r2, r3, #4
 800221c:	600a      	str	r2, [r1, #0]
 800221e:	681e      	ldr	r6, [r3, #0]
 8002220:	2100      	movs	r1, #0
 8002222:	4630      	mov	r0, r6
 8002224:	6862      	ldr	r2, [r4, #4]
 8002226:	f000 fa9d 	bl	8002764 <memchr>
 800222a:	b108      	cbz	r0, 8002230 <_printf_i+0x1f4>
 800222c:	1b80      	subs	r0, r0, r6
 800222e:	6060      	str	r0, [r4, #4]
 8002230:	6863      	ldr	r3, [r4, #4]
 8002232:	6123      	str	r3, [r4, #16]
 8002234:	2300      	movs	r3, #0
 8002236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800223a:	e7a8      	b.n	800218e <_printf_i+0x152>
 800223c:	4632      	mov	r2, r6
 800223e:	4649      	mov	r1, r9
 8002240:	4640      	mov	r0, r8
 8002242:	6923      	ldr	r3, [r4, #16]
 8002244:	47d0      	blx	sl
 8002246:	3001      	adds	r0, #1
 8002248:	d0ab      	beq.n	80021a2 <_printf_i+0x166>
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	079b      	lsls	r3, r3, #30
 800224e:	d413      	bmi.n	8002278 <_printf_i+0x23c>
 8002250:	68e0      	ldr	r0, [r4, #12]
 8002252:	9b03      	ldr	r3, [sp, #12]
 8002254:	4298      	cmp	r0, r3
 8002256:	bfb8      	it	lt
 8002258:	4618      	movlt	r0, r3
 800225a:	e7a4      	b.n	80021a6 <_printf_i+0x16a>
 800225c:	2301      	movs	r3, #1
 800225e:	4632      	mov	r2, r6
 8002260:	4649      	mov	r1, r9
 8002262:	4640      	mov	r0, r8
 8002264:	47d0      	blx	sl
 8002266:	3001      	adds	r0, #1
 8002268:	d09b      	beq.n	80021a2 <_printf_i+0x166>
 800226a:	3501      	adds	r5, #1
 800226c:	68e3      	ldr	r3, [r4, #12]
 800226e:	9903      	ldr	r1, [sp, #12]
 8002270:	1a5b      	subs	r3, r3, r1
 8002272:	42ab      	cmp	r3, r5
 8002274:	dcf2      	bgt.n	800225c <_printf_i+0x220>
 8002276:	e7eb      	b.n	8002250 <_printf_i+0x214>
 8002278:	2500      	movs	r5, #0
 800227a:	f104 0619 	add.w	r6, r4, #25
 800227e:	e7f5      	b.n	800226c <_printf_i+0x230>
 8002280:	08002a0d 	.word	0x08002a0d
 8002284:	08002a1e 	.word	0x08002a1e

08002288 <_sbrk_r>:
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	2300      	movs	r3, #0
 800228c:	4d05      	ldr	r5, [pc, #20]	; (80022a4 <_sbrk_r+0x1c>)
 800228e:	4604      	mov	r4, r0
 8002290:	4608      	mov	r0, r1
 8002292:	602b      	str	r3, [r5, #0]
 8002294:	f7fe f990 	bl	80005b8 <_sbrk>
 8002298:	1c43      	adds	r3, r0, #1
 800229a:	d102      	bne.n	80022a2 <_sbrk_r+0x1a>
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	b103      	cbz	r3, 80022a2 <_sbrk_r+0x1a>
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
 80022a4:	200000a8 	.word	0x200000a8

080022a8 <__sread>:
 80022a8:	b510      	push	{r4, lr}
 80022aa:	460c      	mov	r4, r1
 80022ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b0:	f000 fabe 	bl	8002830 <_read_r>
 80022b4:	2800      	cmp	r0, #0
 80022b6:	bfab      	itete	ge
 80022b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022ba:	89a3      	ldrhlt	r3, [r4, #12]
 80022bc:	181b      	addge	r3, r3, r0
 80022be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022c2:	bfac      	ite	ge
 80022c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80022c6:	81a3      	strhlt	r3, [r4, #12]
 80022c8:	bd10      	pop	{r4, pc}

080022ca <__swrite>:
 80022ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ce:	461f      	mov	r7, r3
 80022d0:	898b      	ldrh	r3, [r1, #12]
 80022d2:	4605      	mov	r5, r0
 80022d4:	05db      	lsls	r3, r3, #23
 80022d6:	460c      	mov	r4, r1
 80022d8:	4616      	mov	r6, r2
 80022da:	d505      	bpl.n	80022e8 <__swrite+0x1e>
 80022dc:	2302      	movs	r3, #2
 80022de:	2200      	movs	r2, #0
 80022e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e4:	f000 f9c8 	bl	8002678 <_lseek_r>
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	4632      	mov	r2, r6
 80022ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022f0:	81a3      	strh	r3, [r4, #12]
 80022f2:	4628      	mov	r0, r5
 80022f4:	463b      	mov	r3, r7
 80022f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022fe:	f000 b869 	b.w	80023d4 <_write_r>

08002302 <__sseek>:
 8002302:	b510      	push	{r4, lr}
 8002304:	460c      	mov	r4, r1
 8002306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800230a:	f000 f9b5 	bl	8002678 <_lseek_r>
 800230e:	1c43      	adds	r3, r0, #1
 8002310:	89a3      	ldrh	r3, [r4, #12]
 8002312:	bf15      	itete	ne
 8002314:	6560      	strne	r0, [r4, #84]	; 0x54
 8002316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800231a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800231e:	81a3      	strheq	r3, [r4, #12]
 8002320:	bf18      	it	ne
 8002322:	81a3      	strhne	r3, [r4, #12]
 8002324:	bd10      	pop	{r4, pc}

08002326 <__sclose>:
 8002326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800232a:	f000 b8d3 	b.w	80024d4 <_close_r>
	...

08002330 <__swbuf_r>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	460e      	mov	r6, r1
 8002334:	4614      	mov	r4, r2
 8002336:	4605      	mov	r5, r0
 8002338:	b118      	cbz	r0, 8002342 <__swbuf_r+0x12>
 800233a:	6983      	ldr	r3, [r0, #24]
 800233c:	b90b      	cbnz	r3, 8002342 <__swbuf_r+0x12>
 800233e:	f7ff fbbb 	bl	8001ab8 <__sinit>
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <__swbuf_r+0x98>)
 8002344:	429c      	cmp	r4, r3
 8002346:	d12b      	bne.n	80023a0 <__swbuf_r+0x70>
 8002348:	686c      	ldr	r4, [r5, #4]
 800234a:	69a3      	ldr	r3, [r4, #24]
 800234c:	60a3      	str	r3, [r4, #8]
 800234e:	89a3      	ldrh	r3, [r4, #12]
 8002350:	071a      	lsls	r2, r3, #28
 8002352:	d52f      	bpl.n	80023b4 <__swbuf_r+0x84>
 8002354:	6923      	ldr	r3, [r4, #16]
 8002356:	b36b      	cbz	r3, 80023b4 <__swbuf_r+0x84>
 8002358:	6923      	ldr	r3, [r4, #16]
 800235a:	6820      	ldr	r0, [r4, #0]
 800235c:	b2f6      	uxtb	r6, r6
 800235e:	1ac0      	subs	r0, r0, r3
 8002360:	6963      	ldr	r3, [r4, #20]
 8002362:	4637      	mov	r7, r6
 8002364:	4283      	cmp	r3, r0
 8002366:	dc04      	bgt.n	8002372 <__swbuf_r+0x42>
 8002368:	4621      	mov	r1, r4
 800236a:	4628      	mov	r0, r5
 800236c:	f000 f948 	bl	8002600 <_fflush_r>
 8002370:	bb30      	cbnz	r0, 80023c0 <__swbuf_r+0x90>
 8002372:	68a3      	ldr	r3, [r4, #8]
 8002374:	3001      	adds	r0, #1
 8002376:	3b01      	subs	r3, #1
 8002378:	60a3      	str	r3, [r4, #8]
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	6022      	str	r2, [r4, #0]
 8002380:	701e      	strb	r6, [r3, #0]
 8002382:	6963      	ldr	r3, [r4, #20]
 8002384:	4283      	cmp	r3, r0
 8002386:	d004      	beq.n	8002392 <__swbuf_r+0x62>
 8002388:	89a3      	ldrh	r3, [r4, #12]
 800238a:	07db      	lsls	r3, r3, #31
 800238c:	d506      	bpl.n	800239c <__swbuf_r+0x6c>
 800238e:	2e0a      	cmp	r6, #10
 8002390:	d104      	bne.n	800239c <__swbuf_r+0x6c>
 8002392:	4621      	mov	r1, r4
 8002394:	4628      	mov	r0, r5
 8002396:	f000 f933 	bl	8002600 <_fflush_r>
 800239a:	b988      	cbnz	r0, 80023c0 <__swbuf_r+0x90>
 800239c:	4638      	mov	r0, r7
 800239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <__swbuf_r+0x9c>)
 80023a2:	429c      	cmp	r4, r3
 80023a4:	d101      	bne.n	80023aa <__swbuf_r+0x7a>
 80023a6:	68ac      	ldr	r4, [r5, #8]
 80023a8:	e7cf      	b.n	800234a <__swbuf_r+0x1a>
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <__swbuf_r+0xa0>)
 80023ac:	429c      	cmp	r4, r3
 80023ae:	bf08      	it	eq
 80023b0:	68ec      	ldreq	r4, [r5, #12]
 80023b2:	e7ca      	b.n	800234a <__swbuf_r+0x1a>
 80023b4:	4621      	mov	r1, r4
 80023b6:	4628      	mov	r0, r5
 80023b8:	f000 f81e 	bl	80023f8 <__swsetup_r>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d0cb      	beq.n	8002358 <__swbuf_r+0x28>
 80023c0:	f04f 37ff 	mov.w	r7, #4294967295
 80023c4:	e7ea      	b.n	800239c <__swbuf_r+0x6c>
 80023c6:	bf00      	nop
 80023c8:	080029bc 	.word	0x080029bc
 80023cc:	080029dc 	.word	0x080029dc
 80023d0:	0800299c 	.word	0x0800299c

080023d4 <_write_r>:
 80023d4:	b538      	push	{r3, r4, r5, lr}
 80023d6:	4604      	mov	r4, r0
 80023d8:	4608      	mov	r0, r1
 80023da:	4611      	mov	r1, r2
 80023dc:	2200      	movs	r2, #0
 80023de:	4d05      	ldr	r5, [pc, #20]	; (80023f4 <_write_r+0x20>)
 80023e0:	602a      	str	r2, [r5, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f7fd ff44 	bl	8000270 <_write>
 80023e8:	1c43      	adds	r3, r0, #1
 80023ea:	d102      	bne.n	80023f2 <_write_r+0x1e>
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	b103      	cbz	r3, 80023f2 <_write_r+0x1e>
 80023f0:	6023      	str	r3, [r4, #0]
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
 80023f4:	200000a8 	.word	0x200000a8

080023f8 <__swsetup_r>:
 80023f8:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <__swsetup_r+0xcc>)
 80023fa:	b570      	push	{r4, r5, r6, lr}
 80023fc:	681d      	ldr	r5, [r3, #0]
 80023fe:	4606      	mov	r6, r0
 8002400:	460c      	mov	r4, r1
 8002402:	b125      	cbz	r5, 800240e <__swsetup_r+0x16>
 8002404:	69ab      	ldr	r3, [r5, #24]
 8002406:	b913      	cbnz	r3, 800240e <__swsetup_r+0x16>
 8002408:	4628      	mov	r0, r5
 800240a:	f7ff fb55 	bl	8001ab8 <__sinit>
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <__swsetup_r+0xd0>)
 8002410:	429c      	cmp	r4, r3
 8002412:	d10f      	bne.n	8002434 <__swsetup_r+0x3c>
 8002414:	686c      	ldr	r4, [r5, #4]
 8002416:	89a3      	ldrh	r3, [r4, #12]
 8002418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800241c:	0719      	lsls	r1, r3, #28
 800241e:	d42c      	bmi.n	800247a <__swsetup_r+0x82>
 8002420:	06dd      	lsls	r5, r3, #27
 8002422:	d411      	bmi.n	8002448 <__swsetup_r+0x50>
 8002424:	2309      	movs	r3, #9
 8002426:	6033      	str	r3, [r6, #0]
 8002428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	81a3      	strh	r3, [r4, #12]
 8002432:	e03e      	b.n	80024b2 <__swsetup_r+0xba>
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <__swsetup_r+0xd4>)
 8002436:	429c      	cmp	r4, r3
 8002438:	d101      	bne.n	800243e <__swsetup_r+0x46>
 800243a:	68ac      	ldr	r4, [r5, #8]
 800243c:	e7eb      	b.n	8002416 <__swsetup_r+0x1e>
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <__swsetup_r+0xd8>)
 8002440:	429c      	cmp	r4, r3
 8002442:	bf08      	it	eq
 8002444:	68ec      	ldreq	r4, [r5, #12]
 8002446:	e7e6      	b.n	8002416 <__swsetup_r+0x1e>
 8002448:	0758      	lsls	r0, r3, #29
 800244a:	d512      	bpl.n	8002472 <__swsetup_r+0x7a>
 800244c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800244e:	b141      	cbz	r1, 8002462 <__swsetup_r+0x6a>
 8002450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002454:	4299      	cmp	r1, r3
 8002456:	d002      	beq.n	800245e <__swsetup_r+0x66>
 8002458:	4630      	mov	r0, r6
 800245a:	f000 f99d 	bl	8002798 <_free_r>
 800245e:	2300      	movs	r3, #0
 8002460:	6363      	str	r3, [r4, #52]	; 0x34
 8002462:	89a3      	ldrh	r3, [r4, #12]
 8002464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002468:	81a3      	strh	r3, [r4, #12]
 800246a:	2300      	movs	r3, #0
 800246c:	6063      	str	r3, [r4, #4]
 800246e:	6923      	ldr	r3, [r4, #16]
 8002470:	6023      	str	r3, [r4, #0]
 8002472:	89a3      	ldrh	r3, [r4, #12]
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	81a3      	strh	r3, [r4, #12]
 800247a:	6923      	ldr	r3, [r4, #16]
 800247c:	b94b      	cbnz	r3, 8002492 <__swsetup_r+0x9a>
 800247e:	89a3      	ldrh	r3, [r4, #12]
 8002480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d003      	beq.n	8002492 <__swsetup_r+0x9a>
 800248a:	4621      	mov	r1, r4
 800248c:	4630      	mov	r0, r6
 800248e:	f000 f929 	bl	80026e4 <__smakebuf_r>
 8002492:	89a0      	ldrh	r0, [r4, #12]
 8002494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002498:	f010 0301 	ands.w	r3, r0, #1
 800249c:	d00a      	beq.n	80024b4 <__swsetup_r+0xbc>
 800249e:	2300      	movs	r3, #0
 80024a0:	60a3      	str	r3, [r4, #8]
 80024a2:	6963      	ldr	r3, [r4, #20]
 80024a4:	425b      	negs	r3, r3
 80024a6:	61a3      	str	r3, [r4, #24]
 80024a8:	6923      	ldr	r3, [r4, #16]
 80024aa:	b943      	cbnz	r3, 80024be <__swsetup_r+0xc6>
 80024ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80024b0:	d1ba      	bne.n	8002428 <__swsetup_r+0x30>
 80024b2:	bd70      	pop	{r4, r5, r6, pc}
 80024b4:	0781      	lsls	r1, r0, #30
 80024b6:	bf58      	it	pl
 80024b8:	6963      	ldrpl	r3, [r4, #20]
 80024ba:	60a3      	str	r3, [r4, #8]
 80024bc:	e7f4      	b.n	80024a8 <__swsetup_r+0xb0>
 80024be:	2000      	movs	r0, #0
 80024c0:	e7f7      	b.n	80024b2 <__swsetup_r+0xba>
 80024c2:	bf00      	nop
 80024c4:	2000000c 	.word	0x2000000c
 80024c8:	080029bc 	.word	0x080029bc
 80024cc:	080029dc 	.word	0x080029dc
 80024d0:	0800299c 	.word	0x0800299c

080024d4 <_close_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	2300      	movs	r3, #0
 80024d8:	4d05      	ldr	r5, [pc, #20]	; (80024f0 <_close_r+0x1c>)
 80024da:	4604      	mov	r4, r0
 80024dc:	4608      	mov	r0, r1
 80024de:	602b      	str	r3, [r5, #0]
 80024e0:	f7fe f839 	bl	8000556 <_close>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d102      	bne.n	80024ee <_close_r+0x1a>
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	b103      	cbz	r3, 80024ee <_close_r+0x1a>
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	bd38      	pop	{r3, r4, r5, pc}
 80024f0:	200000a8 	.word	0x200000a8

080024f4 <__sflush_r>:
 80024f4:	898a      	ldrh	r2, [r1, #12]
 80024f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024fa:	4605      	mov	r5, r0
 80024fc:	0710      	lsls	r0, r2, #28
 80024fe:	460c      	mov	r4, r1
 8002500:	d458      	bmi.n	80025b4 <__sflush_r+0xc0>
 8002502:	684b      	ldr	r3, [r1, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	dc05      	bgt.n	8002514 <__sflush_r+0x20>
 8002508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	dc02      	bgt.n	8002514 <__sflush_r+0x20>
 800250e:	2000      	movs	r0, #0
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002516:	2e00      	cmp	r6, #0
 8002518:	d0f9      	beq.n	800250e <__sflush_r+0x1a>
 800251a:	2300      	movs	r3, #0
 800251c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002520:	682f      	ldr	r7, [r5, #0]
 8002522:	602b      	str	r3, [r5, #0]
 8002524:	d032      	beq.n	800258c <__sflush_r+0x98>
 8002526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002528:	89a3      	ldrh	r3, [r4, #12]
 800252a:	075a      	lsls	r2, r3, #29
 800252c:	d505      	bpl.n	800253a <__sflush_r+0x46>
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	1ac0      	subs	r0, r0, r3
 8002532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002534:	b10b      	cbz	r3, 800253a <__sflush_r+0x46>
 8002536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002538:	1ac0      	subs	r0, r0, r3
 800253a:	2300      	movs	r3, #0
 800253c:	4602      	mov	r2, r0
 800253e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002540:	4628      	mov	r0, r5
 8002542:	6a21      	ldr	r1, [r4, #32]
 8002544:	47b0      	blx	r6
 8002546:	1c43      	adds	r3, r0, #1
 8002548:	89a3      	ldrh	r3, [r4, #12]
 800254a:	d106      	bne.n	800255a <__sflush_r+0x66>
 800254c:	6829      	ldr	r1, [r5, #0]
 800254e:	291d      	cmp	r1, #29
 8002550:	d82c      	bhi.n	80025ac <__sflush_r+0xb8>
 8002552:	4a2a      	ldr	r2, [pc, #168]	; (80025fc <__sflush_r+0x108>)
 8002554:	40ca      	lsrs	r2, r1
 8002556:	07d6      	lsls	r6, r2, #31
 8002558:	d528      	bpl.n	80025ac <__sflush_r+0xb8>
 800255a:	2200      	movs	r2, #0
 800255c:	6062      	str	r2, [r4, #4]
 800255e:	6922      	ldr	r2, [r4, #16]
 8002560:	04d9      	lsls	r1, r3, #19
 8002562:	6022      	str	r2, [r4, #0]
 8002564:	d504      	bpl.n	8002570 <__sflush_r+0x7c>
 8002566:	1c42      	adds	r2, r0, #1
 8002568:	d101      	bne.n	800256e <__sflush_r+0x7a>
 800256a:	682b      	ldr	r3, [r5, #0]
 800256c:	b903      	cbnz	r3, 8002570 <__sflush_r+0x7c>
 800256e:	6560      	str	r0, [r4, #84]	; 0x54
 8002570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002572:	602f      	str	r7, [r5, #0]
 8002574:	2900      	cmp	r1, #0
 8002576:	d0ca      	beq.n	800250e <__sflush_r+0x1a>
 8002578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800257c:	4299      	cmp	r1, r3
 800257e:	d002      	beq.n	8002586 <__sflush_r+0x92>
 8002580:	4628      	mov	r0, r5
 8002582:	f000 f909 	bl	8002798 <_free_r>
 8002586:	2000      	movs	r0, #0
 8002588:	6360      	str	r0, [r4, #52]	; 0x34
 800258a:	e7c1      	b.n	8002510 <__sflush_r+0x1c>
 800258c:	6a21      	ldr	r1, [r4, #32]
 800258e:	2301      	movs	r3, #1
 8002590:	4628      	mov	r0, r5
 8002592:	47b0      	blx	r6
 8002594:	1c41      	adds	r1, r0, #1
 8002596:	d1c7      	bne.n	8002528 <__sflush_r+0x34>
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0c4      	beq.n	8002528 <__sflush_r+0x34>
 800259e:	2b1d      	cmp	r3, #29
 80025a0:	d001      	beq.n	80025a6 <__sflush_r+0xb2>
 80025a2:	2b16      	cmp	r3, #22
 80025a4:	d101      	bne.n	80025aa <__sflush_r+0xb6>
 80025a6:	602f      	str	r7, [r5, #0]
 80025a8:	e7b1      	b.n	800250e <__sflush_r+0x1a>
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b0:	81a3      	strh	r3, [r4, #12]
 80025b2:	e7ad      	b.n	8002510 <__sflush_r+0x1c>
 80025b4:	690f      	ldr	r7, [r1, #16]
 80025b6:	2f00      	cmp	r7, #0
 80025b8:	d0a9      	beq.n	800250e <__sflush_r+0x1a>
 80025ba:	0793      	lsls	r3, r2, #30
 80025bc:	bf18      	it	ne
 80025be:	2300      	movne	r3, #0
 80025c0:	680e      	ldr	r6, [r1, #0]
 80025c2:	bf08      	it	eq
 80025c4:	694b      	ldreq	r3, [r1, #20]
 80025c6:	eba6 0807 	sub.w	r8, r6, r7
 80025ca:	600f      	str	r7, [r1, #0]
 80025cc:	608b      	str	r3, [r1, #8]
 80025ce:	f1b8 0f00 	cmp.w	r8, #0
 80025d2:	dd9c      	ble.n	800250e <__sflush_r+0x1a>
 80025d4:	4643      	mov	r3, r8
 80025d6:	463a      	mov	r2, r7
 80025d8:	4628      	mov	r0, r5
 80025da:	6a21      	ldr	r1, [r4, #32]
 80025dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025de:	47b0      	blx	r6
 80025e0:	2800      	cmp	r0, #0
 80025e2:	dc06      	bgt.n	80025f2 <__sflush_r+0xfe>
 80025e4:	89a3      	ldrh	r3, [r4, #12]
 80025e6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ee:	81a3      	strh	r3, [r4, #12]
 80025f0:	e78e      	b.n	8002510 <__sflush_r+0x1c>
 80025f2:	4407      	add	r7, r0
 80025f4:	eba8 0800 	sub.w	r8, r8, r0
 80025f8:	e7e9      	b.n	80025ce <__sflush_r+0xda>
 80025fa:	bf00      	nop
 80025fc:	20400001 	.word	0x20400001

08002600 <_fflush_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	690b      	ldr	r3, [r1, #16]
 8002604:	4605      	mov	r5, r0
 8002606:	460c      	mov	r4, r1
 8002608:	b913      	cbnz	r3, 8002610 <_fflush_r+0x10>
 800260a:	2500      	movs	r5, #0
 800260c:	4628      	mov	r0, r5
 800260e:	bd38      	pop	{r3, r4, r5, pc}
 8002610:	b118      	cbz	r0, 800261a <_fflush_r+0x1a>
 8002612:	6983      	ldr	r3, [r0, #24]
 8002614:	b90b      	cbnz	r3, 800261a <_fflush_r+0x1a>
 8002616:	f7ff fa4f 	bl	8001ab8 <__sinit>
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <_fflush_r+0x6c>)
 800261c:	429c      	cmp	r4, r3
 800261e:	d11b      	bne.n	8002658 <_fflush_r+0x58>
 8002620:	686c      	ldr	r4, [r5, #4]
 8002622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ef      	beq.n	800260a <_fflush_r+0xa>
 800262a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800262c:	07d0      	lsls	r0, r2, #31
 800262e:	d404      	bmi.n	800263a <_fflush_r+0x3a>
 8002630:	0599      	lsls	r1, r3, #22
 8002632:	d402      	bmi.n	800263a <_fflush_r+0x3a>
 8002634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002636:	f7ff fadd 	bl	8001bf4 <__retarget_lock_acquire_recursive>
 800263a:	4628      	mov	r0, r5
 800263c:	4621      	mov	r1, r4
 800263e:	f7ff ff59 	bl	80024f4 <__sflush_r>
 8002642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002644:	4605      	mov	r5, r0
 8002646:	07da      	lsls	r2, r3, #31
 8002648:	d4e0      	bmi.n	800260c <_fflush_r+0xc>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	059b      	lsls	r3, r3, #22
 800264e:	d4dd      	bmi.n	800260c <_fflush_r+0xc>
 8002650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002652:	f7ff fad0 	bl	8001bf6 <__retarget_lock_release_recursive>
 8002656:	e7d9      	b.n	800260c <_fflush_r+0xc>
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <_fflush_r+0x70>)
 800265a:	429c      	cmp	r4, r3
 800265c:	d101      	bne.n	8002662 <_fflush_r+0x62>
 800265e:	68ac      	ldr	r4, [r5, #8]
 8002660:	e7df      	b.n	8002622 <_fflush_r+0x22>
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <_fflush_r+0x74>)
 8002664:	429c      	cmp	r4, r3
 8002666:	bf08      	it	eq
 8002668:	68ec      	ldreq	r4, [r5, #12]
 800266a:	e7da      	b.n	8002622 <_fflush_r+0x22>
 800266c:	080029bc 	.word	0x080029bc
 8002670:	080029dc 	.word	0x080029dc
 8002674:	0800299c 	.word	0x0800299c

08002678 <_lseek_r>:
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4604      	mov	r4, r0
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	2200      	movs	r2, #0
 8002682:	4d05      	ldr	r5, [pc, #20]	; (8002698 <_lseek_r+0x20>)
 8002684:	602a      	str	r2, [r5, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	f7fd ff89 	bl	800059e <_lseek>
 800268c:	1c43      	adds	r3, r0, #1
 800268e:	d102      	bne.n	8002696 <_lseek_r+0x1e>
 8002690:	682b      	ldr	r3, [r5, #0]
 8002692:	b103      	cbz	r3, 8002696 <_lseek_r+0x1e>
 8002694:	6023      	str	r3, [r4, #0]
 8002696:	bd38      	pop	{r3, r4, r5, pc}
 8002698:	200000a8 	.word	0x200000a8

0800269c <__swhatbuf_r>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	460e      	mov	r6, r1
 80026a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026a4:	4614      	mov	r4, r2
 80026a6:	2900      	cmp	r1, #0
 80026a8:	461d      	mov	r5, r3
 80026aa:	b096      	sub	sp, #88	; 0x58
 80026ac:	da07      	bge.n	80026be <__swhatbuf_r+0x22>
 80026ae:	2300      	movs	r3, #0
 80026b0:	602b      	str	r3, [r5, #0]
 80026b2:	89b3      	ldrh	r3, [r6, #12]
 80026b4:	061a      	lsls	r2, r3, #24
 80026b6:	d410      	bmi.n	80026da <__swhatbuf_r+0x3e>
 80026b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026bc:	e00e      	b.n	80026dc <__swhatbuf_r+0x40>
 80026be:	466a      	mov	r2, sp
 80026c0:	f000 f8c8 	bl	8002854 <_fstat_r>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	dbf2      	blt.n	80026ae <__swhatbuf_r+0x12>
 80026c8:	9a01      	ldr	r2, [sp, #4]
 80026ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80026ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80026d2:	425a      	negs	r2, r3
 80026d4:	415a      	adcs	r2, r3
 80026d6:	602a      	str	r2, [r5, #0]
 80026d8:	e7ee      	b.n	80026b8 <__swhatbuf_r+0x1c>
 80026da:	2340      	movs	r3, #64	; 0x40
 80026dc:	2000      	movs	r0, #0
 80026de:	6023      	str	r3, [r4, #0]
 80026e0:	b016      	add	sp, #88	; 0x58
 80026e2:	bd70      	pop	{r4, r5, r6, pc}

080026e4 <__smakebuf_r>:
 80026e4:	898b      	ldrh	r3, [r1, #12]
 80026e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026e8:	079d      	lsls	r5, r3, #30
 80026ea:	4606      	mov	r6, r0
 80026ec:	460c      	mov	r4, r1
 80026ee:	d507      	bpl.n	8002700 <__smakebuf_r+0x1c>
 80026f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	6123      	str	r3, [r4, #16]
 80026f8:	2301      	movs	r3, #1
 80026fa:	6163      	str	r3, [r4, #20]
 80026fc:	b002      	add	sp, #8
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	466a      	mov	r2, sp
 8002702:	ab01      	add	r3, sp, #4
 8002704:	f7ff ffca 	bl	800269c <__swhatbuf_r>
 8002708:	9900      	ldr	r1, [sp, #0]
 800270a:	4605      	mov	r5, r0
 800270c:	4630      	mov	r0, r6
 800270e:	f7ff fa73 	bl	8001bf8 <_malloc_r>
 8002712:	b948      	cbnz	r0, 8002728 <__smakebuf_r+0x44>
 8002714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002718:	059a      	lsls	r2, r3, #22
 800271a:	d4ef      	bmi.n	80026fc <__smakebuf_r+0x18>
 800271c:	f023 0303 	bic.w	r3, r3, #3
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	81a3      	strh	r3, [r4, #12]
 8002726:	e7e3      	b.n	80026f0 <__smakebuf_r+0xc>
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <__smakebuf_r+0x7c>)
 800272a:	62b3      	str	r3, [r6, #40]	; 0x28
 800272c:	89a3      	ldrh	r3, [r4, #12]
 800272e:	6020      	str	r0, [r4, #0]
 8002730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002734:	81a3      	strh	r3, [r4, #12]
 8002736:	9b00      	ldr	r3, [sp, #0]
 8002738:	6120      	str	r0, [r4, #16]
 800273a:	6163      	str	r3, [r4, #20]
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	b15b      	cbz	r3, 8002758 <__smakebuf_r+0x74>
 8002740:	4630      	mov	r0, r6
 8002742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002746:	f000 f897 	bl	8002878 <_isatty_r>
 800274a:	b128      	cbz	r0, 8002758 <__smakebuf_r+0x74>
 800274c:	89a3      	ldrh	r3, [r4, #12]
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	81a3      	strh	r3, [r4, #12]
 8002758:	89a0      	ldrh	r0, [r4, #12]
 800275a:	4305      	orrs	r5, r0
 800275c:	81a5      	strh	r5, [r4, #12]
 800275e:	e7cd      	b.n	80026fc <__smakebuf_r+0x18>
 8002760:	08001a51 	.word	0x08001a51

08002764 <memchr>:
 8002764:	4603      	mov	r3, r0
 8002766:	b510      	push	{r4, lr}
 8002768:	b2c9      	uxtb	r1, r1
 800276a:	4402      	add	r2, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	4618      	mov	r0, r3
 8002770:	d101      	bne.n	8002776 <memchr+0x12>
 8002772:	2000      	movs	r0, #0
 8002774:	e003      	b.n	800277e <memchr+0x1a>
 8002776:	7804      	ldrb	r4, [r0, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	428c      	cmp	r4, r1
 800277c:	d1f6      	bne.n	800276c <memchr+0x8>
 800277e:	bd10      	pop	{r4, pc}

08002780 <__malloc_lock>:
 8002780:	4801      	ldr	r0, [pc, #4]	; (8002788 <__malloc_lock+0x8>)
 8002782:	f7ff ba37 	b.w	8001bf4 <__retarget_lock_acquire_recursive>
 8002786:	bf00      	nop
 8002788:	200000a0 	.word	0x200000a0

0800278c <__malloc_unlock>:
 800278c:	4801      	ldr	r0, [pc, #4]	; (8002794 <__malloc_unlock+0x8>)
 800278e:	f7ff ba32 	b.w	8001bf6 <__retarget_lock_release_recursive>
 8002792:	bf00      	nop
 8002794:	200000a0 	.word	0x200000a0

08002798 <_free_r>:
 8002798:	b538      	push	{r3, r4, r5, lr}
 800279a:	4605      	mov	r5, r0
 800279c:	2900      	cmp	r1, #0
 800279e:	d043      	beq.n	8002828 <_free_r+0x90>
 80027a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027a4:	1f0c      	subs	r4, r1, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bfb8      	it	lt
 80027aa:	18e4      	addlt	r4, r4, r3
 80027ac:	f7ff ffe8 	bl	8002780 <__malloc_lock>
 80027b0:	4a1e      	ldr	r2, [pc, #120]	; (800282c <_free_r+0x94>)
 80027b2:	6813      	ldr	r3, [r2, #0]
 80027b4:	4610      	mov	r0, r2
 80027b6:	b933      	cbnz	r3, 80027c6 <_free_r+0x2e>
 80027b8:	6063      	str	r3, [r4, #4]
 80027ba:	6014      	str	r4, [r2, #0]
 80027bc:	4628      	mov	r0, r5
 80027be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027c2:	f7ff bfe3 	b.w	800278c <__malloc_unlock>
 80027c6:	42a3      	cmp	r3, r4
 80027c8:	d90a      	bls.n	80027e0 <_free_r+0x48>
 80027ca:	6821      	ldr	r1, [r4, #0]
 80027cc:	1862      	adds	r2, r4, r1
 80027ce:	4293      	cmp	r3, r2
 80027d0:	bf01      	itttt	eq
 80027d2:	681a      	ldreq	r2, [r3, #0]
 80027d4:	685b      	ldreq	r3, [r3, #4]
 80027d6:	1852      	addeq	r2, r2, r1
 80027d8:	6022      	streq	r2, [r4, #0]
 80027da:	6063      	str	r3, [r4, #4]
 80027dc:	6004      	str	r4, [r0, #0]
 80027de:	e7ed      	b.n	80027bc <_free_r+0x24>
 80027e0:	461a      	mov	r2, r3
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	b10b      	cbz	r3, 80027ea <_free_r+0x52>
 80027e6:	42a3      	cmp	r3, r4
 80027e8:	d9fa      	bls.n	80027e0 <_free_r+0x48>
 80027ea:	6811      	ldr	r1, [r2, #0]
 80027ec:	1850      	adds	r0, r2, r1
 80027ee:	42a0      	cmp	r0, r4
 80027f0:	d10b      	bne.n	800280a <_free_r+0x72>
 80027f2:	6820      	ldr	r0, [r4, #0]
 80027f4:	4401      	add	r1, r0
 80027f6:	1850      	adds	r0, r2, r1
 80027f8:	4283      	cmp	r3, r0
 80027fa:	6011      	str	r1, [r2, #0]
 80027fc:	d1de      	bne.n	80027bc <_free_r+0x24>
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4401      	add	r1, r0
 8002804:	6011      	str	r1, [r2, #0]
 8002806:	6053      	str	r3, [r2, #4]
 8002808:	e7d8      	b.n	80027bc <_free_r+0x24>
 800280a:	d902      	bls.n	8002812 <_free_r+0x7a>
 800280c:	230c      	movs	r3, #12
 800280e:	602b      	str	r3, [r5, #0]
 8002810:	e7d4      	b.n	80027bc <_free_r+0x24>
 8002812:	6820      	ldr	r0, [r4, #0]
 8002814:	1821      	adds	r1, r4, r0
 8002816:	428b      	cmp	r3, r1
 8002818:	bf01      	itttt	eq
 800281a:	6819      	ldreq	r1, [r3, #0]
 800281c:	685b      	ldreq	r3, [r3, #4]
 800281e:	1809      	addeq	r1, r1, r0
 8002820:	6021      	streq	r1, [r4, #0]
 8002822:	6063      	str	r3, [r4, #4]
 8002824:	6054      	str	r4, [r2, #4]
 8002826:	e7c9      	b.n	80027bc <_free_r+0x24>
 8002828:	bd38      	pop	{r3, r4, r5, pc}
 800282a:	bf00      	nop
 800282c:	20000090 	.word	0x20000090

08002830 <_read_r>:
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	4604      	mov	r4, r0
 8002834:	4608      	mov	r0, r1
 8002836:	4611      	mov	r1, r2
 8002838:	2200      	movs	r2, #0
 800283a:	4d05      	ldr	r5, [pc, #20]	; (8002850 <_read_r+0x20>)
 800283c:	602a      	str	r2, [r5, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f7fd fe6c 	bl	800051c <_read>
 8002844:	1c43      	adds	r3, r0, #1
 8002846:	d102      	bne.n	800284e <_read_r+0x1e>
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	b103      	cbz	r3, 800284e <_read_r+0x1e>
 800284c:	6023      	str	r3, [r4, #0]
 800284e:	bd38      	pop	{r3, r4, r5, pc}
 8002850:	200000a8 	.word	0x200000a8

08002854 <_fstat_r>:
 8002854:	b538      	push	{r3, r4, r5, lr}
 8002856:	2300      	movs	r3, #0
 8002858:	4d06      	ldr	r5, [pc, #24]	; (8002874 <_fstat_r+0x20>)
 800285a:	4604      	mov	r4, r0
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	602b      	str	r3, [r5, #0]
 8002862:	f7fd fe83 	bl	800056c <_fstat>
 8002866:	1c43      	adds	r3, r0, #1
 8002868:	d102      	bne.n	8002870 <_fstat_r+0x1c>
 800286a:	682b      	ldr	r3, [r5, #0]
 800286c:	b103      	cbz	r3, 8002870 <_fstat_r+0x1c>
 800286e:	6023      	str	r3, [r4, #0]
 8002870:	bd38      	pop	{r3, r4, r5, pc}
 8002872:	bf00      	nop
 8002874:	200000a8 	.word	0x200000a8

08002878 <_isatty_r>:
 8002878:	b538      	push	{r3, r4, r5, lr}
 800287a:	2300      	movs	r3, #0
 800287c:	4d05      	ldr	r5, [pc, #20]	; (8002894 <_isatty_r+0x1c>)
 800287e:	4604      	mov	r4, r0
 8002880:	4608      	mov	r0, r1
 8002882:	602b      	str	r3, [r5, #0]
 8002884:	f7fd fe81 	bl	800058a <_isatty>
 8002888:	1c43      	adds	r3, r0, #1
 800288a:	d102      	bne.n	8002892 <_isatty_r+0x1a>
 800288c:	682b      	ldr	r3, [r5, #0]
 800288e:	b103      	cbz	r3, 8002892 <_isatty_r+0x1a>
 8002890:	6023      	str	r3, [r4, #0]
 8002892:	bd38      	pop	{r3, r4, r5, pc}
 8002894:	200000a8 	.word	0x200000a8

08002898 <_init>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr

080028a4 <_fini>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr
